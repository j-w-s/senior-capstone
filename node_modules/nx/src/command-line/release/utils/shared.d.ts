import { ProjectGraph } from '../../../config/project-graph';
import type { ReleaseGroupWithName } from '../config/filter-release-groups';
import { GitCommit } from './git';
export type VersionData = Record<string, {
    newVersion: string;
    currentVersion: string;
    dependentProjects: any[];
}>;
export declare class ReleaseVersion {
    rawVersion: string;
    gitTag: string;
    isPrerelease: boolean;
    constructor({ version, // short form version string with no prefixes or patterns, e.g. 1.0.0
    releaseTagPattern, // full pattern to interpolate, e.g. "v{version}" or "{projectName}@{version}"
    projectName, }: {
        version: string;
        releaseTagPattern: string;
        projectName?: string;
    });
}
export declare function commitChanges(changedFiles: string[], isDryRun: boolean, isVerbose: boolean, gitCommitMessages: string[], gitCommitArgs?: string): Promise<void>;
export declare function createCommitMessageValues(releaseGroups: ReleaseGroupWithName[], releaseGroupToFilteredProjects: Map<ReleaseGroupWithName, Set<string>>, versionData: VersionData, userCommitMessage?: string): string[];
export declare function createGitTagValues(releaseGroups: ReleaseGroupWithName[], releaseGroupToFilteredProjects: Map<ReleaseGroupWithName, Set<string>>, versionData: VersionData): string[];
export declare function handleDuplicateGitTags(gitTagValues: string[]): void;
export declare function getCommitsRelevantToProjects(projectGraph: ProjectGraph, commits: GitCommit[], projects: string[]): Promise<GitCommit[]>;
