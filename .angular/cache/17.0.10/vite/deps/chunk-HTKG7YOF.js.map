{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/performance/dist/esm/index.esm2017.js"],
  "sourcesContent": ["import { ErrorFactory, areCookiesEnabled, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance, deepEqual } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\nconst name = \"@firebase/performance\";\nconst version = \"0.6.4\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst SDK_VERSION = version;\r\n/** The prefix for start User Timing marks used for creating Traces. */\r\nconst TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\r\n/** The prefix for stop User Timing marks used for creating Traces. */\r\nconst TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\r\n/** The prefix for User Timing measure used for creating Traces. */\r\nconst TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\r\n/** The prefix for out of the box page load Trace name. */\r\nconst OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\r\nconst FIRST_PAINT_COUNTER_NAME = '_fp';\r\nconst FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\r\nconst FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\r\nconst CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\r\nconst CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\r\nconst SERVICE = 'performance';\r\nconst SERVICE_NAME = 'Performance';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"trace started\" /* ErrorCode.TRACE_STARTED_BEFORE */]: 'Trace {$traceName} was started before.',\r\n    [\"trace stopped\" /* ErrorCode.TRACE_STOPPED_BEFORE */]: 'Trace {$traceName} is not running.',\r\n    [\"nonpositive trace startTime\" /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */]: 'Trace {$traceName} startTime should be positive.',\r\n    [\"nonpositive trace duration\" /* ErrorCode.NONPOSITIVE_TRACE_DURATION */]: 'Trace {$traceName} duration should be positive.',\r\n    [\"no window\" /* ErrorCode.NO_WINDOW */]: 'Window is not available.',\r\n    [\"no app id\" /* ErrorCode.NO_APP_ID */]: 'App id is not available.',\r\n    [\"no project id\" /* ErrorCode.NO_PROJECT_ID */]: 'Project id is not available.',\r\n    [\"no api key\" /* ErrorCode.NO_API_KEY */]: 'Api key is not available.',\r\n    [\"invalid cc log\" /* ErrorCode.INVALID_CC_LOG */]: 'Attempted to queue invalid cc event',\r\n    [\"FB not default\" /* ErrorCode.FB_NOT_DEFAULT */]: 'Performance can only start when Firebase app instance is the default one.',\r\n    [\"RC response not ok\" /* ErrorCode.RC_NOT_OK */]: 'RC response is not ok',\r\n    [\"invalid attribute name\" /* ErrorCode.INVALID_ATTRIBUTE_NAME */]: 'Attribute name {$attributeName} is invalid.',\r\n    [\"invalid attribute value\" /* ErrorCode.INVALID_ATTRIBUTE_VALUE */]: 'Attribute value {$attributeValue} is invalid.',\r\n    [\"invalid custom metric name\" /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */]: 'Custom metric name {$customMetricName} is invalid',\r\n    [\"invalid String merger input\" /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */]: 'Input for String merger is invalid, contact support team to resolve.',\r\n    [\"already initialized\" /* ErrorCode.ALREADY_INITIALIZED */]: 'initializePerformance() has already been called with ' +\r\n        'different options. To avoid this error, call initializePerformance() with the ' +\r\n        'same options as when it was originally called, or call getPerformance() to return the' +\r\n        ' already initialized instance.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst consoleLogger = new Logger(SERVICE_NAME);\r\nconsoleLogger.logLevel = LogLevel.INFO;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet apiInstance;\r\nlet windowInstance;\r\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\r\nclass Api {\r\n    constructor(window) {\r\n        this.window = window;\r\n        if (!window) {\r\n            throw ERROR_FACTORY.create(\"no window\" /* ErrorCode.NO_WINDOW */);\r\n        }\r\n        this.performance = window.performance;\r\n        this.PerformanceObserver = window.PerformanceObserver;\r\n        this.windowLocation = window.location;\r\n        this.navigator = window.navigator;\r\n        this.document = window.document;\r\n        if (this.navigator && this.navigator.cookieEnabled) {\r\n            // If user blocks cookies on the browser, accessing localStorage will\r\n            // throw an exception.\r\n            this.localStorage = window.localStorage;\r\n        }\r\n        if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\r\n            this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\r\n        }\r\n    }\r\n    getUrl() {\r\n        // Do not capture the string query part of url.\r\n        return this.windowLocation.href.split('?')[0];\r\n    }\r\n    mark(name) {\r\n        if (!this.performance || !this.performance.mark) {\r\n            return;\r\n        }\r\n        this.performance.mark(name);\r\n    }\r\n    measure(measureName, mark1, mark2) {\r\n        if (!this.performance || !this.performance.measure) {\r\n            return;\r\n        }\r\n        this.performance.measure(measureName, mark1, mark2);\r\n    }\r\n    getEntriesByType(type) {\r\n        if (!this.performance || !this.performance.getEntriesByType) {\r\n            return [];\r\n        }\r\n        return this.performance.getEntriesByType(type);\r\n    }\r\n    getEntriesByName(name) {\r\n        if (!this.performance || !this.performance.getEntriesByName) {\r\n            return [];\r\n        }\r\n        return this.performance.getEntriesByName(name);\r\n    }\r\n    getTimeOrigin() {\r\n        // Polyfill the time origin with performance.timing.navigationStart.\r\n        return (this.performance &&\r\n            (this.performance.timeOrigin || this.performance.timing.navigationStart));\r\n    }\r\n    requiredApisAvailable() {\r\n        if (!fetch || !Promise || !areCookiesEnabled()) {\r\n            consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\r\n            return false;\r\n        }\r\n        if (!isIndexedDBAvailable()) {\r\n            consoleLogger.info('IndexedDB is not supported by current browswer');\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    setupObserver(entryType, callback) {\r\n        if (!this.PerformanceObserver) {\r\n            return;\r\n        }\r\n        const observer = new this.PerformanceObserver(list => {\r\n            for (const entry of list.getEntries()) {\r\n                // `entry` is a PerformanceEntry instance.\r\n                callback(entry);\r\n            }\r\n        });\r\n        // Start observing the entry types you care about.\r\n        observer.observe({ entryTypes: [entryType] });\r\n    }\r\n    static getInstance() {\r\n        if (apiInstance === undefined) {\r\n            apiInstance = new Api(windowInstance);\r\n        }\r\n        return apiInstance;\r\n    }\r\n}\r\nfunction setupApi(window) {\r\n    windowInstance = window;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet iid;\r\nfunction getIidPromise(installationsService) {\r\n    const iidPromise = installationsService.getId();\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    iidPromise.then((iidVal) => {\r\n        iid = iidVal;\r\n    });\r\n    return iidPromise;\r\n}\r\n// This method should be used after the iid is retrieved by getIidPromise method.\r\nfunction getIid() {\r\n    return iid;\r\n}\r\nfunction getAuthTokenPromise(installationsService) {\r\n    const authTokenPromise = installationsService.getToken();\r\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n    authTokenPromise.then((authTokenVal) => {\r\n    });\r\n    return authTokenPromise;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction mergeStrings(part1, part2) {\r\n    const sizeDiff = part1.length - part2.length;\r\n    if (sizeDiff < 0 || sizeDiff > 1) {\r\n        throw ERROR_FACTORY.create(\"invalid String merger input\" /* ErrorCode.INVALID_STRING_MERGER_PARAMETER */);\r\n    }\r\n    const resultArray = [];\r\n    for (let i = 0; i < part1.length; i++) {\r\n        resultArray.push(part1.charAt(i));\r\n        if (part2.length > i) {\r\n            resultArray.push(part2.charAt(i));\r\n        }\r\n    }\r\n    return resultArray.join('');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet settingsServiceInstance;\r\nclass SettingsService {\r\n    constructor() {\r\n        // The variable which controls logging of automatic traces and HTTP/S network monitoring.\r\n        this.instrumentationEnabled = true;\r\n        // The variable which controls logging of custom traces.\r\n        this.dataCollectionEnabled = true;\r\n        // Configuration flags set through remote config.\r\n        this.loggingEnabled = false;\r\n        // Sampling rate between 0 and 1.\r\n        this.tracesSamplingRate = 1;\r\n        this.networkRequestsSamplingRate = 1;\r\n        // Address of logging service.\r\n        this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\r\n        // Performance event transport endpoint URL which should be compatible with proto3.\r\n        // New Address for transport service, not configurable via Remote Config.\r\n        this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\r\n        this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\r\n        // Source type for performance event logs.\r\n        this.logSource = 462;\r\n        // Flags which control per session logging of traces and network requests.\r\n        this.logTraceAfterSampling = false;\r\n        this.logNetworkAfterSampling = false;\r\n        // TTL of config retrieved from remote config in hours.\r\n        this.configTimeToLive = 12;\r\n    }\r\n    getFlTransportFullUrl() {\r\n        return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\r\n    }\r\n    static getInstance() {\r\n        if (settingsServiceInstance === undefined) {\r\n            settingsServiceInstance = new SettingsService();\r\n        }\r\n        return settingsServiceInstance;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar VisibilityState;\r\n(function (VisibilityState) {\r\n    VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\r\n    VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\r\n    VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\r\n})(VisibilityState || (VisibilityState = {}));\r\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\r\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\r\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\r\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\r\nfunction getServiceWorkerStatus() {\r\n    const navigator = Api.getInstance().navigator;\r\n    if (navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) {\r\n        if (navigator.serviceWorker.controller) {\r\n            return 2 /* ServiceWorkerStatus.CONTROLLED */;\r\n        }\r\n        else {\r\n            return 3 /* ServiceWorkerStatus.UNCONTROLLED */;\r\n        }\r\n    }\r\n    else {\r\n        return 1 /* ServiceWorkerStatus.UNSUPPORTED */;\r\n    }\r\n}\r\nfunction getVisibilityState() {\r\n    const document = Api.getInstance().document;\r\n    const visibilityState = document.visibilityState;\r\n    switch (visibilityState) {\r\n        case 'visible':\r\n            return VisibilityState.VISIBLE;\r\n        case 'hidden':\r\n            return VisibilityState.HIDDEN;\r\n        default:\r\n            return VisibilityState.UNKNOWN;\r\n    }\r\n}\r\nfunction getEffectiveConnectionType() {\r\n    const navigator = Api.getInstance().navigator;\r\n    const navigatorConnection = navigator.connection;\r\n    const effectiveType = navigatorConnection && navigatorConnection.effectiveType;\r\n    switch (effectiveType) {\r\n        case 'slow-2g':\r\n            return 1 /* EffectiveConnectionType.CONNECTION_SLOW_2G */;\r\n        case '2g':\r\n            return 2 /* EffectiveConnectionType.CONNECTION_2G */;\r\n        case '3g':\r\n            return 3 /* EffectiveConnectionType.CONNECTION_3G */;\r\n        case '4g':\r\n            return 4 /* EffectiveConnectionType.CONNECTION_4G */;\r\n        default:\r\n            return 0 /* EffectiveConnectionType.UNKNOWN */;\r\n    }\r\n}\r\nfunction isValidCustomAttributeName(name) {\r\n    if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\r\n        return false;\r\n    }\r\n    const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix => name.startsWith(prefix));\r\n    return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\r\n}\r\nfunction isValidCustomAttributeValue(value) {\r\n    return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction getAppId(firebaseApp) {\r\n    var _a;\r\n    const appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no app id\" /* ErrorCode.NO_APP_ID */);\r\n    }\r\n    return appId;\r\n}\r\nfunction getProjectId(firebaseApp) {\r\n    var _a;\r\n    const projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;\r\n    if (!projectId) {\r\n        throw ERROR_FACTORY.create(\"no project id\" /* ErrorCode.NO_PROJECT_ID */);\r\n    }\r\n    return projectId;\r\n}\r\nfunction getApiKey(firebaseApp) {\r\n    var _a;\r\n    const apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;\r\n    if (!apiKey) {\r\n        throw ERROR_FACTORY.create(\"no api key\" /* ErrorCode.NO_API_KEY */);\r\n    }\r\n    return apiKey;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\r\n// These values will be used if the remote config object is successfully\r\n// retrieved, but the template does not have these fields.\r\nconst DEFAULT_CONFIGS = {\r\n    loggingEnabled: true\r\n};\r\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\r\nfunction getConfig(performanceController, iid) {\r\n    const config = getStoredConfig();\r\n    if (config) {\r\n        processConfig(config);\r\n        return Promise.resolve();\r\n    }\r\n    return getRemoteConfig(performanceController, iid)\r\n        .then(processConfig)\r\n        .then(config => storeConfig(config), \r\n    /** Do nothing for error, use defaults set in settings service. */\r\n    () => { });\r\n}\r\nfunction getStoredConfig() {\r\n    const localStorage = Api.getInstance().localStorage;\r\n    if (!localStorage) {\r\n        return;\r\n    }\r\n    const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\r\n    if (!expiryString || !configValid(expiryString)) {\r\n        return;\r\n    }\r\n    const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\r\n    if (!configStringified) {\r\n        return;\r\n    }\r\n    try {\r\n        const configResponse = JSON.parse(configStringified);\r\n        return configResponse;\r\n    }\r\n    catch (_a) {\r\n        return;\r\n    }\r\n}\r\nfunction storeConfig(config) {\r\n    const localStorage = Api.getInstance().localStorage;\r\n    if (!config || !localStorage) {\r\n        return;\r\n    }\r\n    localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\r\n    localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() +\r\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\r\n}\r\nconst COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\r\nfunction getRemoteConfig(performanceController, iid) {\r\n    // Perf needs auth token only to retrieve remote config.\r\n    return getAuthTokenPromise(performanceController.installations)\r\n        .then(authToken => {\r\n        const projectId = getProjectId(performanceController.app);\r\n        const apiKey = getApiKey(performanceController.app);\r\n        const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\r\n        const request = new Request(configEndPoint, {\r\n            method: 'POST',\r\n            headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\r\n            /* eslint-disable camelcase */\r\n            body: JSON.stringify({\r\n                app_instance_id: iid,\r\n                app_instance_id_token: authToken,\r\n                app_id: getAppId(performanceController.app),\r\n                app_version: SDK_VERSION,\r\n                sdk_version: REMOTE_CONFIG_SDK_VERSION\r\n            })\r\n            /* eslint-enable camelcase */\r\n        });\r\n        return fetch(request).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            // In case response is not ok. This will be caught by catch.\r\n            throw ERROR_FACTORY.create(\"RC response not ok\" /* ErrorCode.RC_NOT_OK */);\r\n        });\r\n    })\r\n        .catch(() => {\r\n        consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\r\n        return undefined;\r\n    });\r\n}\r\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\r\nfunction processConfig(config) {\r\n    if (!config) {\r\n        return config;\r\n    }\r\n    const settingsServiceInstance = SettingsService.getInstance();\r\n    const entries = config.entries || {};\r\n    if (entries.fpr_enabled !== undefined) {\r\n        // TODO: Change the assignment of loggingEnabled once the received type is\r\n        // known.\r\n        settingsServiceInstance.loggingEnabled =\r\n            String(entries.fpr_enabled) === 'true';\r\n    }\r\n    else {\r\n        // Config retrieved successfully, but there is no fpr_enabled in template.\r\n        // Use secondary configs value.\r\n        settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\r\n    }\r\n    if (entries.fpr_log_source) {\r\n        settingsServiceInstance.logSource = Number(entries.fpr_log_source);\r\n    }\r\n    else if (DEFAULT_CONFIGS.logSource) {\r\n        settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\r\n    }\r\n    if (entries.fpr_log_endpoint_url) {\r\n        settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\r\n    }\r\n    else if (DEFAULT_CONFIGS.logEndPointUrl) {\r\n        settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\r\n    }\r\n    // Key from Remote Config has to be non-empty string, otherwsie use local value.\r\n    if (entries.fpr_log_transport_key) {\r\n        settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\r\n    }\r\n    else if (DEFAULT_CONFIGS.transportKey) {\r\n        settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\r\n    }\r\n    if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\r\n        settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\r\n    }\r\n    else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\r\n        settingsServiceInstance.networkRequestsSamplingRate =\r\n            DEFAULT_CONFIGS.networkRequestsSamplingRate;\r\n    }\r\n    if (entries.fpr_vc_trace_sampling_rate !== undefined) {\r\n        settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\r\n    }\r\n    else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\r\n        settingsServiceInstance.tracesSamplingRate =\r\n            DEFAULT_CONFIGS.tracesSamplingRate;\r\n    }\r\n    // Set the per session trace and network logging flags.\r\n    settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\r\n    settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\r\n    return config;\r\n}\r\nfunction configValid(expiry) {\r\n    return Number(expiry) > Date.now();\r\n}\r\nfunction shouldLogAfterSampling(samplingRate) {\r\n    return Math.random() <= samplingRate;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nlet initializationStatus = 1 /* InitializationStatus.notInitialized */;\r\nlet initializationPromise;\r\nfunction getInitializationPromise(performanceController) {\r\n    initializationStatus = 2 /* InitializationStatus.initializationPending */;\r\n    initializationPromise =\r\n        initializationPromise || initializePerf(performanceController);\r\n    return initializationPromise;\r\n}\r\nfunction isPerfInitialized() {\r\n    return initializationStatus === 3 /* InitializationStatus.initialized */;\r\n}\r\nfunction initializePerf(performanceController) {\r\n    return getDocumentReadyComplete()\r\n        .then(() => getIidPromise(performanceController.installations))\r\n        .then(iid => getConfig(performanceController, iid))\r\n        .then(() => changeInitializationStatus(), () => changeInitializationStatus());\r\n}\r\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\r\nfunction getDocumentReadyComplete() {\r\n    const document = Api.getInstance().document;\r\n    return new Promise(resolve => {\r\n        if (document && document.readyState !== 'complete') {\r\n            const handler = () => {\r\n                if (document.readyState === 'complete') {\r\n                    document.removeEventListener('readystatechange', handler);\r\n                    resolve();\r\n                }\r\n            };\r\n            document.addEventListener('readystatechange', handler);\r\n        }\r\n        else {\r\n            resolve();\r\n        }\r\n    });\r\n}\r\nfunction changeInitializationStatus() {\r\n    initializationStatus = 3 /* InitializationStatus.initialized */;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\r\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\r\n// If end point does not work, the call will be tried for these many times.\r\nconst DEFAULT_REMAINING_TRIES = 3;\r\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\r\nlet remainingTries = DEFAULT_REMAINING_TRIES;\r\n/* eslint-enable camelcase */\r\nlet queue = [];\r\nlet isTransportSetup = false;\r\nfunction setupTransportService() {\r\n    if (!isTransportSetup) {\r\n        processQueue(INITIAL_SEND_TIME_DELAY_MS);\r\n        isTransportSetup = true;\r\n    }\r\n}\r\nfunction processQueue(timeOffset) {\r\n    setTimeout(() => {\r\n        // If there is no remainingTries left, stop retrying.\r\n        if (remainingTries === 0) {\r\n            return;\r\n        }\r\n        // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\r\n        if (!queue.length) {\r\n            return processQueue(DEFAULT_SEND_INTERVAL_MS);\r\n        }\r\n        dispatchQueueEvents();\r\n    }, timeOffset);\r\n}\r\nfunction dispatchQueueEvents() {\r\n    // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\r\n    // The staged events will be used for current logRequest attempt, remaining events will be kept\r\n    // for next attempt.\r\n    const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\r\n    /* eslint-disable camelcase */\r\n    // We will pass the JSON serialized event to the backend.\r\n    const log_event = staged.map(evt => ({\r\n        source_extension_json_proto3: evt.message,\r\n        event_time_ms: String(evt.eventTime)\r\n    }));\r\n    const data = {\r\n        request_time_ms: String(Date.now()),\r\n        client_info: {\r\n            client_type: 1,\r\n            js_client_info: {}\r\n        },\r\n        log_source: SettingsService.getInstance().logSource,\r\n        log_event\r\n    };\r\n    /* eslint-enable camelcase */\r\n    sendEventsToFl(data, staged).catch(() => {\r\n        // If the request fails for some reason, add the events that were attempted\r\n        // back to the primary queue to retry later.\r\n        queue = [...staged, ...queue];\r\n        remainingTries--;\r\n        consoleLogger.info(`Tries left: ${remainingTries}.`);\r\n        processQueue(DEFAULT_SEND_INTERVAL_MS);\r\n    });\r\n}\r\nfunction sendEventsToFl(data, staged) {\r\n    return postToFlEndpoint(data)\r\n        .then(res => {\r\n        if (!res.ok) {\r\n            consoleLogger.info('Call to Firebase backend failed.');\r\n        }\r\n        return res.json();\r\n    })\r\n        .then(res => {\r\n        // Find the next call wait time from the response.\r\n        const transportWait = Number(res.nextRequestWaitMillis);\r\n        let requestOffset = DEFAULT_SEND_INTERVAL_MS;\r\n        if (!isNaN(transportWait)) {\r\n            requestOffset = Math.max(transportWait, requestOffset);\r\n        }\r\n        // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\r\n        // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\r\n        const logResponseDetails = res.logResponseDetails;\r\n        if (Array.isArray(logResponseDetails) &&\r\n            logResponseDetails.length > 0 &&\r\n            logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\r\n            queue = [...staged, ...queue];\r\n            consoleLogger.info(`Retry transport request later.`);\r\n        }\r\n        remainingTries = DEFAULT_REMAINING_TRIES;\r\n        // Schedule the next process.\r\n        processQueue(requestOffset);\r\n    });\r\n}\r\nfunction postToFlEndpoint(data) {\r\n    const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\r\n    return fetch(flTransportFullUrl, {\r\n        method: 'POST',\r\n        body: JSON.stringify(data)\r\n    });\r\n}\r\nfunction addToQueue(evt) {\r\n    if (!evt.eventTime || !evt.message) {\r\n        throw ERROR_FACTORY.create(\"invalid cc log\" /* ErrorCode.INVALID_CC_LOG */);\r\n    }\r\n    // Add the new event to the queue.\r\n    queue = [...queue, evt];\r\n}\r\n/** Log handler for cc service to send the performance logs to the server. */\r\nfunction transportHandler(\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nserializer) {\r\n    return (...args) => {\r\n        const message = serializer(...args);\r\n        addToQueue({\r\n            message,\r\n            eventTime: Date.now()\r\n        });\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/* eslint-enble camelcase */\r\nlet logger;\r\n// This method is not called before initialization.\r\nfunction sendLog(resource, resourceType) {\r\n    if (!logger) {\r\n        logger = transportHandler(serializer);\r\n    }\r\n    logger(resource, resourceType);\r\n}\r\nfunction logTrace(trace) {\r\n    const settingsService = SettingsService.getInstance();\r\n    // Do not log if trace is auto generated and instrumentation is disabled.\r\n    if (!settingsService.instrumentationEnabled && trace.isAuto) {\r\n        return;\r\n    }\r\n    // Do not log if trace is custom and data collection is disabled.\r\n    if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\r\n        return;\r\n    }\r\n    // Do not log if required apis are not available.\r\n    if (!Api.getInstance().requiredApisAvailable()) {\r\n        return;\r\n    }\r\n    // Only log the page load auto traces if page is visible.\r\n    if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\r\n        return;\r\n    }\r\n    if (isPerfInitialized()) {\r\n        sendTraceLog(trace);\r\n    }\r\n    else {\r\n        // Custom traces can be used before the initialization but logging\r\n        // should wait until after.\r\n        getInitializationPromise(trace.performanceController).then(() => sendTraceLog(trace), () => sendTraceLog(trace));\r\n    }\r\n}\r\nfunction sendTraceLog(trace) {\r\n    if (!getIid()) {\r\n        return;\r\n    }\r\n    const settingsService = SettingsService.getInstance();\r\n    if (!settingsService.loggingEnabled ||\r\n        !settingsService.logTraceAfterSampling) {\r\n        return;\r\n    }\r\n    setTimeout(() => sendLog(trace, 1 /* ResourceType.Trace */), 0);\r\n}\r\nfunction logNetworkRequest(networkRequest) {\r\n    const settingsService = SettingsService.getInstance();\r\n    // Do not log network requests if instrumentation is disabled.\r\n    if (!settingsService.instrumentationEnabled) {\r\n        return;\r\n    }\r\n    // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\r\n    // Need to blacklist both old and new endpoints to avoid migration gap.\r\n    const networkRequestUrl = networkRequest.url;\r\n    // Blacklist old log endpoint and new transport endpoint.\r\n    // Because Performance SDK doesn't instrument requests sent from SDK itself.\r\n    const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\r\n    const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\r\n    if (networkRequestUrl === logEndpointUrl ||\r\n        networkRequestUrl === flEndpointUrl) {\r\n        return;\r\n    }\r\n    if (!settingsService.loggingEnabled ||\r\n        !settingsService.logNetworkAfterSampling) {\r\n        return;\r\n    }\r\n    setTimeout(() => sendLog(networkRequest, 0 /* ResourceType.NetworkRequest */), 0);\r\n}\r\nfunction serializer(resource, resourceType) {\r\n    if (resourceType === 0 /* ResourceType.NetworkRequest */) {\r\n        return serializeNetworkRequest(resource);\r\n    }\r\n    return serializeTrace(resource);\r\n}\r\nfunction serializeNetworkRequest(networkRequest) {\r\n    const networkRequestMetric = {\r\n        url: networkRequest.url,\r\n        http_method: networkRequest.httpMethod || 0,\r\n        http_response_code: 200,\r\n        response_payload_bytes: networkRequest.responsePayloadBytes,\r\n        client_start_time_us: networkRequest.startTimeUs,\r\n        time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\r\n        time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\r\n    };\r\n    const perfMetric = {\r\n        application_info: getApplicationInfo(networkRequest.performanceController.app),\r\n        network_request_metric: networkRequestMetric\r\n    };\r\n    return JSON.stringify(perfMetric);\r\n}\r\nfunction serializeTrace(trace) {\r\n    const traceMetric = {\r\n        name: trace.name,\r\n        is_auto: trace.isAuto,\r\n        client_start_time_us: trace.startTimeUs,\r\n        duration_us: trace.durationUs\r\n    };\r\n    if (Object.keys(trace.counters).length !== 0) {\r\n        traceMetric.counters = trace.counters;\r\n    }\r\n    const customAttributes = trace.getAttributes();\r\n    if (Object.keys(customAttributes).length !== 0) {\r\n        traceMetric.custom_attributes = customAttributes;\r\n    }\r\n    const perfMetric = {\r\n        application_info: getApplicationInfo(trace.performanceController.app),\r\n        trace_metric: traceMetric\r\n    };\r\n    return JSON.stringify(perfMetric);\r\n}\r\nfunction getApplicationInfo(firebaseApp) {\r\n    return {\r\n        google_app_id: getAppId(firebaseApp),\r\n        app_instance_id: getIid(),\r\n        web_app_info: {\r\n            sdk_version: SDK_VERSION,\r\n            page_url: Api.getInstance().getUrl(),\r\n            service_worker_status: getServiceWorkerStatus(),\r\n            visibility_state: getVisibilityState(),\r\n            effective_connection_type: getEffectiveConnectionType()\r\n        },\r\n        application_process_state: 0\r\n    };\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst MAX_METRIC_NAME_LENGTH = 100;\r\nconst RESERVED_AUTO_PREFIX = '_';\r\nconst oobMetrics = [\r\n    FIRST_PAINT_COUNTER_NAME,\r\n    FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\r\n    FIRST_INPUT_DELAY_COUNTER_NAME\r\n];\r\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\r\nfunction isValidMetricName(name, traceName) {\r\n    if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\r\n        return false;\r\n    }\r\n    return ((traceName &&\r\n        traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\r\n        oobMetrics.indexOf(name) > -1) ||\r\n        !name.startsWith(RESERVED_AUTO_PREFIX));\r\n}\r\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\r\nfunction convertMetricValueToInteger(providedValue) {\r\n    const valueAsInteger = Math.floor(providedValue);\r\n    if (valueAsInteger < providedValue) {\r\n        consoleLogger.info(`Metric value should be an Integer, setting the value as : ${valueAsInteger}.`);\r\n    }\r\n    return valueAsInteger;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass Trace {\r\n    /**\r\n     * @param performanceController The performance controller running.\r\n     * @param name The name of the trace.\r\n     * @param isAuto If the trace is auto-instrumented.\r\n     * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n     * is only set when the trace is built for logging when the user directly uses the user timing\r\n     * api (performance.mark and performance.measure).\r\n     */\r\n    constructor(performanceController, name, isAuto = false, traceMeasureName) {\r\n        this.performanceController = performanceController;\r\n        this.name = name;\r\n        this.isAuto = isAuto;\r\n        this.state = 1 /* TraceState.UNINITIALIZED */;\r\n        this.customAttributes = {};\r\n        this.counters = {};\r\n        this.api = Api.getInstance();\r\n        this.randomId = Math.floor(Math.random() * 1000000);\r\n        if (!this.isAuto) {\r\n            this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\r\n            this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\r\n            this.traceMeasure =\r\n                traceMeasureName ||\r\n                    `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\r\n            if (traceMeasureName) {\r\n                // For the case of direct user timing traces, no start stop will happen. The measure object\r\n                // is already available.\r\n                this.calculateTraceMetrics();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Starts a trace. The measurement of the duration starts at this point.\r\n     */\r\n    start() {\r\n        if (this.state !== 1 /* TraceState.UNINITIALIZED */) {\r\n            throw ERROR_FACTORY.create(\"trace started\" /* ErrorCode.TRACE_STARTED_BEFORE */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        this.api.mark(this.traceStartMark);\r\n        this.state = 2 /* TraceState.RUNNING */;\r\n    }\r\n    /**\r\n     * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n     * is logged.\r\n     */\r\n    stop() {\r\n        if (this.state !== 2 /* TraceState.RUNNING */) {\r\n            throw ERROR_FACTORY.create(\"trace stopped\" /* ErrorCode.TRACE_STOPPED_BEFORE */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        this.state = 3 /* TraceState.TERMINATED */;\r\n        this.api.mark(this.traceStopMark);\r\n        this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\r\n        this.calculateTraceMetrics();\r\n        logTrace(this);\r\n    }\r\n    /**\r\n     * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n     * directly. No need to use start and stop methods.\r\n     * @param startTime Trace start time since epoch in millisec\r\n     * @param duration The duraction of the trace in millisec\r\n     * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n     */\r\n    record(startTime, duration, options) {\r\n        if (startTime <= 0) {\r\n            throw ERROR_FACTORY.create(\"nonpositive trace startTime\" /* ErrorCode.NONPOSITIVE_TRACE_START_TIME */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        if (duration <= 0) {\r\n            throw ERROR_FACTORY.create(\"nonpositive trace duration\" /* ErrorCode.NONPOSITIVE_TRACE_DURATION */, {\r\n                traceName: this.name\r\n            });\r\n        }\r\n        this.durationUs = Math.floor(duration * 1000);\r\n        this.startTimeUs = Math.floor(startTime * 1000);\r\n        if (options && options.attributes) {\r\n            this.customAttributes = Object.assign({}, options.attributes);\r\n        }\r\n        if (options && options.metrics) {\r\n            for (const metricName of Object.keys(options.metrics)) {\r\n                if (!isNaN(Number(options.metrics[metricName]))) {\r\n                    this.counters[metricName] = Math.floor(Number(options.metrics[metricName]));\r\n                }\r\n            }\r\n        }\r\n        logTrace(this);\r\n    }\r\n    /**\r\n     * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n     * custom metric if one with the given name does not exist. The value will be floored down to an\r\n     * integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Increment by value\r\n     */\r\n    incrementMetric(counter, numAsInteger = 1) {\r\n        if (this.counters[counter] === undefined) {\r\n            this.putMetric(counter, numAsInteger);\r\n        }\r\n        else {\r\n            this.putMetric(counter, this.counters[counter] + numAsInteger);\r\n        }\r\n    }\r\n    /**\r\n     * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n     * given name does not exist. The value will be floored down to an integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Set custom metric to this value\r\n     */\r\n    putMetric(counter, numAsInteger) {\r\n        if (isValidMetricName(counter, this.name)) {\r\n            this.counters[counter] = convertMetricValueToInteger(numAsInteger !== null && numAsInteger !== void 0 ? numAsInteger : 0);\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"invalid custom metric name\" /* ErrorCode.INVALID_CUSTOM_METRIC_NAME */, {\r\n                customMetricName: counter\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n     * not exist will return zero.\r\n     * @param counter\r\n     */\r\n    getMetric(counter) {\r\n        return this.counters[counter] || 0;\r\n    }\r\n    /**\r\n     * Sets a custom attribute of a trace to a certain value.\r\n     * @param attr\r\n     * @param value\r\n     */\r\n    putAttribute(attr, value) {\r\n        const isValidName = isValidCustomAttributeName(attr);\r\n        const isValidValue = isValidCustomAttributeValue(value);\r\n        if (isValidName && isValidValue) {\r\n            this.customAttributes[attr] = value;\r\n            return;\r\n        }\r\n        // Throw appropriate error when the attribute name or value is invalid.\r\n        if (!isValidName) {\r\n            throw ERROR_FACTORY.create(\"invalid attribute name\" /* ErrorCode.INVALID_ATTRIBUTE_NAME */, {\r\n                attributeName: attr\r\n            });\r\n        }\r\n        if (!isValidValue) {\r\n            throw ERROR_FACTORY.create(\"invalid attribute value\" /* ErrorCode.INVALID_ATTRIBUTE_VALUE */, {\r\n                attributeValue: value\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the value a custom attribute of a trace is set to.\r\n     * @param attr\r\n     */\r\n    getAttribute(attr) {\r\n        return this.customAttributes[attr];\r\n    }\r\n    removeAttribute(attr) {\r\n        if (this.customAttributes[attr] === undefined) {\r\n            return;\r\n        }\r\n        delete this.customAttributes[attr];\r\n    }\r\n    getAttributes() {\r\n        return Object.assign({}, this.customAttributes);\r\n    }\r\n    setStartTime(startTime) {\r\n        this.startTimeUs = startTime;\r\n    }\r\n    setDuration(duration) {\r\n        this.durationUs = duration;\r\n    }\r\n    /**\r\n     * Calculates and assigns the duration and start time of the trace using the measure performance\r\n     * entry.\r\n     */\r\n    calculateTraceMetrics() {\r\n        const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\r\n        const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\r\n        if (perfMeasureEntry) {\r\n            this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\r\n            this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\r\n        }\r\n    }\r\n    /**\r\n     * @param navigationTimings A single element array which contains the navigationTIming object of\r\n     * the page load\r\n     * @param paintTimings A array which contains paintTiming object of the page load\r\n     * @param firstInputDelay First input delay in millisec\r\n     */\r\n    static createOobTrace(performanceController, navigationTimings, paintTimings, firstInputDelay) {\r\n        const route = Api.getInstance().getUrl();\r\n        if (!route) {\r\n            return;\r\n        }\r\n        const trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\r\n        const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\r\n        trace.setStartTime(timeOriginUs);\r\n        // navigationTimings includes only one element.\r\n        if (navigationTimings && navigationTimings[0]) {\r\n            trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\r\n            trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\r\n            trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\r\n            trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\r\n        }\r\n        const FIRST_PAINT = 'first-paint';\r\n        const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\r\n        if (paintTimings) {\r\n            const firstPaint = paintTimings.find(paintObject => paintObject.name === FIRST_PAINT);\r\n            if (firstPaint && firstPaint.startTime) {\r\n                trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\r\n            }\r\n            const firstContentfulPaint = paintTimings.find(paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT);\r\n            if (firstContentfulPaint && firstContentfulPaint.startTime) {\r\n                trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\r\n            }\r\n            if (firstInputDelay) {\r\n                trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\r\n            }\r\n        }\r\n        logTrace(trace);\r\n    }\r\n    static createUserTimingTrace(performanceController, measureName) {\r\n        const trace = new Trace(performanceController, measureName, false, measureName);\r\n        logTrace(trace);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction createNetworkRequestEntry(performanceController, entry) {\r\n    const performanceEntry = entry;\r\n    if (!performanceEntry || performanceEntry.responseStart === undefined) {\r\n        return;\r\n    }\r\n    const timeOrigin = Api.getInstance().getTimeOrigin();\r\n    const startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\r\n    const timeToResponseInitiatedUs = performanceEntry.responseStart\r\n        ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000)\r\n        : undefined;\r\n    const timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);\r\n    // Remove the query params from logged network request url.\r\n    const url = performanceEntry.name && performanceEntry.name.split('?')[0];\r\n    const networkRequest = {\r\n        performanceController,\r\n        url,\r\n        responsePayloadBytes: performanceEntry.transferSize,\r\n        startTimeUs,\r\n        timeToResponseInitiatedUs,\r\n        timeToResponseCompletedUs\r\n    };\r\n    logNetworkRequest(networkRequest);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst FID_WAIT_TIME_MS = 5000;\r\nfunction setupOobResources(performanceController) {\r\n    // Do not initialize unless iid is available.\r\n    if (!getIid()) {\r\n        return;\r\n    }\r\n    // The load event might not have fired yet, and that means performance navigation timing\r\n    // object has a duration of 0. The setup should run after all current tasks in js queue.\r\n    setTimeout(() => setupOobTraces(performanceController), 0);\r\n    setTimeout(() => setupNetworkRequests(performanceController), 0);\r\n    setTimeout(() => setupUserTimingTraces(performanceController), 0);\r\n}\r\nfunction setupNetworkRequests(performanceController) {\r\n    const api = Api.getInstance();\r\n    const resources = api.getEntriesByType('resource');\r\n    for (const resource of resources) {\r\n        createNetworkRequestEntry(performanceController, resource);\r\n    }\r\n    api.setupObserver('resource', entry => createNetworkRequestEntry(performanceController, entry));\r\n}\r\nfunction setupOobTraces(performanceController) {\r\n    const api = Api.getInstance();\r\n    const navigationTimings = api.getEntriesByType('navigation');\r\n    const paintTimings = api.getEntriesByType('paint');\r\n    // If First Input Desly polyfill is added to the page, report the fid value.\r\n    // https://github.com/GoogleChromeLabs/first-input-delay\r\n    if (api.onFirstInputDelay) {\r\n        // If the fid call back is not called for certain time, continue without it.\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        let timeoutId = setTimeout(() => {\r\n            Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\r\n            timeoutId = undefined;\r\n        }, FID_WAIT_TIME_MS);\r\n        api.onFirstInputDelay((fid) => {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n                Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);\r\n            }\r\n        });\r\n    }\r\n    else {\r\n        Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\r\n    }\r\n}\r\nfunction setupUserTimingTraces(performanceController) {\r\n    const api = Api.getInstance();\r\n    // Run through the measure performance entries collected up to this point.\r\n    const measures = api.getEntriesByType('measure');\r\n    for (const measure of measures) {\r\n        createUserTimingTrace(performanceController, measure);\r\n    }\r\n    // Setup an observer to capture the measures from this point on.\r\n    api.setupObserver('measure', entry => createUserTimingTrace(performanceController, entry));\r\n}\r\nfunction createUserTimingTrace(performanceController, measure) {\r\n    const measureName = measure.name;\r\n    // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\r\n    if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\r\n        TRACE_MEASURE_PREFIX) {\r\n        return;\r\n    }\r\n    Trace.createUserTimingTrace(performanceController, measureName);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nclass PerformanceController {\r\n    constructor(app, installations) {\r\n        this.app = app;\r\n        this.installations = installations;\r\n        this.initialized = false;\r\n    }\r\n    /**\r\n     * This method *must* be called internally as part of creating a\r\n     * PerformanceController instance.\r\n     *\r\n     * Currently it's not possible to pass the settings object through the\r\n     * constructor using Components, so this method exists to be called with the\r\n     * desired settings, to ensure nothing is collected without the user's\r\n     * consent.\r\n     */\r\n    _init(settings) {\r\n        if (this.initialized) {\r\n            return;\r\n        }\r\n        if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {\r\n            this.dataCollectionEnabled = settings.dataCollectionEnabled;\r\n        }\r\n        if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {\r\n            this.instrumentationEnabled = settings.instrumentationEnabled;\r\n        }\r\n        if (Api.getInstance().requiredApisAvailable()) {\r\n            validateIndexedDBOpenable()\r\n                .then(isAvailable => {\r\n                if (isAvailable) {\r\n                    setupTransportService();\r\n                    getInitializationPromise(this).then(() => setupOobResources(this), () => setupOobResources(this));\r\n                    this.initialized = true;\r\n                }\r\n            })\r\n                .catch(error => {\r\n                consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\r\n            });\r\n        }\r\n        else {\r\n            consoleLogger.info('Firebase Performance cannot start if the browser does not support ' +\r\n                '\"Fetch\" and \"Promise\", or cookies are disabled.');\r\n        }\r\n    }\r\n    set instrumentationEnabled(val) {\r\n        SettingsService.getInstance().instrumentationEnabled = val;\r\n    }\r\n    get instrumentationEnabled() {\r\n        return SettingsService.getInstance().instrumentationEnabled;\r\n    }\r\n    set dataCollectionEnabled(val) {\r\n        SettingsService.getInstance().dataCollectionEnabled = val;\r\n    }\r\n    get dataCollectionEnabled() {\r\n        return SettingsService.getInstance().dataCollectionEnabled;\r\n    }\r\n}\n\n/**\r\n * Firebase Performance Monitoring\r\n *\r\n * @packageDocumentation\r\n */\r\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\r\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @public\r\n */\r\nfunction getPerformance(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    const provider = _getProvider(app, 'performance');\r\n    const perfInstance = provider.getImmediate();\r\n    return perfInstance;\r\n}\r\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\r\n * @public\r\n */\r\nfunction initializePerformance(app, settings) {\r\n    app = getModularInstance(app);\r\n    const provider = _getProvider(app, 'performance');\r\n    // throw if an instance was already created.\r\n    // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\r\n    if (provider.isInitialized()) {\r\n        const existingInstance = provider.getImmediate();\r\n        const initialSettings = provider.getOptions();\r\n        if (deepEqual(initialSettings, settings !== null && settings !== void 0 ? settings : {})) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"already initialized\" /* ErrorCode.ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const perfInstance = provider.initialize({\r\n        options: settings\r\n    });\r\n    return perfInstance;\r\n}\r\n/**\r\n * Returns a new `PerformanceTrace` instance.\r\n * @param performance - The {@link FirebasePerformance} instance to use.\r\n * @param name - The name of the trace.\r\n * @public\r\n */\r\nfunction trace(performance, name) {\r\n    performance = getModularInstance(performance);\r\n    return new Trace(performance, name);\r\n}\r\nconst factory = (container, { options: settings }) => {\r\n    // Dependencies\r\n    const app = container.getProvider('app').getImmediate();\r\n    const installations = container\r\n        .getProvider('installations-internal')\r\n        .getImmediate();\r\n    if (app.name !== DEFAULT_ENTRY_NAME) {\r\n        throw ERROR_FACTORY.create(\"FB not default\" /* ErrorCode.FB_NOT_DEFAULT */);\r\n    }\r\n    if (typeof window === 'undefined') {\r\n        throw ERROR_FACTORY.create(\"no window\" /* ErrorCode.NO_WINDOW */);\r\n    }\r\n    setupApi(window);\r\n    const perfInstance = new PerformanceController(app, installations);\r\n    perfInstance._init(settings);\r\n    return perfInstance;\r\n};\r\nfunction registerPerformance() {\r\n    _registerComponent(new Component('performance', factory, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\r\nregisterPerformance();\n\nexport { getPerformance, initializePerformance, trace };\n\n"],
  "mappings": "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",
  "names": ["window", "name", "VisibilityState", "iid", "config", "settingsServiceInstance", "serializer", "trace"]
}
