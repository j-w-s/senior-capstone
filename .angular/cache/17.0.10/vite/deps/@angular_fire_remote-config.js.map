{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/remote-config/dist/esm/index.esm2017.js", "../../../../../node_modules/rxfire/remote-config/index.esm.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-remote-config.mjs"],
  "sourcesContent": ["import { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\n\nconst name = \"@firebase/remote-config\";\nconst version = \"0.4.4\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nclass RemoteConfigAbortSignal {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    addEventListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    abort() {\r\n        this.listeners.forEach(listener => listener());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst RC_COMPONENT_NAME = 'remote-config';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERROR_DESCRIPTION_MAP = {\r\n    [\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */]: 'Undefined window object. This SDK only supports usage in a browser environment.',\r\n    [\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */]: 'Undefined project identifier. Check Firebase app initialization.',\r\n    [\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */]: 'Undefined API key. Check Firebase app initialization.',\r\n    [\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */]: 'Undefined app identifier. Check Firebase app initialization.',\r\n    [\"storage-open\" /* ErrorCode.STORAGE_OPEN */]: 'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-get\" /* ErrorCode.STORAGE_GET */]: 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-set\" /* ErrorCode.STORAGE_SET */]: 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\r\n    [\"storage-delete\" /* ErrorCode.STORAGE_DELETE */]: 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\r\n    [\"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */]: 'Fetch client failed to connect to a network. Check Internet connection.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */]: 'The config fetch request timed out. ' +\r\n        ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\r\n    [\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    [\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */]: 'Fetch client could not parse response.' +\r\n        ' Original error: {$originalErrorMessage}.',\r\n    [\"fetch-status\" /* ErrorCode.FETCH_STATUS */]: 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\r\n    [\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */]: 'Indexed DB is not supported by current browser'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('remoteconfig' /* service */, 'Remote Config' /* service name */, ERROR_DESCRIPTION_MAP);\r\n// Note how this is like typeof/instanceof, but for ErrorCode.\r\nfunction hasErrorCode(e, errorCode) {\r\n    return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\r\nconst DEFAULT_VALUE_FOR_STRING = '';\r\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\r\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\r\nclass Value {\r\n    constructor(_source, _value = DEFAULT_VALUE_FOR_STRING) {\r\n        this._source = _source;\r\n        this._value = _value;\r\n    }\r\n    asString() {\r\n        return this._value;\r\n    }\r\n    asBoolean() {\r\n        if (this._source === 'static') {\r\n            return DEFAULT_VALUE_FOR_BOOLEAN;\r\n        }\r\n        return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\r\n    }\r\n    asNumber() {\r\n        if (this._source === 'static') {\r\n            return DEFAULT_VALUE_FOR_NUMBER;\r\n        }\r\n        let num = Number(this._value);\r\n        if (isNaN(num)) {\r\n            num = DEFAULT_VALUE_FOR_NUMBER;\r\n        }\r\n        return num;\r\n    }\r\n    getSource() {\r\n        return this._source;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\r\nfunction getRemoteConfig(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\r\n    return rcProvider.getImmediate();\r\n}\r\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\r\nasync function activate(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\r\n        rc._storage.getLastSuccessfulFetchResponse(),\r\n        rc._storage.getActiveConfigEtag()\r\n    ]);\r\n    if (!lastSuccessfulFetchResponse ||\r\n        !lastSuccessfulFetchResponse.config ||\r\n        !lastSuccessfulFetchResponse.eTag ||\r\n        lastSuccessfulFetchResponse.eTag === activeConfigEtag) {\r\n        // Either there is no successful fetched config, or is the same as current active\r\n        // config.\r\n        return false;\r\n    }\r\n    await Promise.all([\r\n        rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\r\n        rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\r\n    ]);\r\n    return true;\r\n}\r\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\r\nfunction ensureInitialized(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    if (!rc._initializePromise) {\r\n        rc._initializePromise = rc._storageCache.loadFromStorage().then(() => {\r\n            rc._isInitializationComplete = true;\r\n        });\r\n    }\r\n    return rc._initializePromise;\r\n}\r\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\r\nasync function fetchConfig(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    // Aborts the request after the given timeout, causing the fetch call to\r\n    // reject with an `AbortError`.\r\n    //\r\n    // <p>Aborting after the request completes is a no-op, so we don't need a\r\n    // corresponding `clearTimeout`.\r\n    //\r\n    // Locating abort logic here because:\r\n    // * it uses a developer setting (timeout)\r\n    // * it applies to all retries (like curl's max-time arg)\r\n    // * it is consistent with the Fetch API's signal input\r\n    const abortSignal = new RemoteConfigAbortSignal();\r\n    setTimeout(async () => {\r\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n        abortSignal.abort();\r\n    }, rc.settings.fetchTimeoutMillis);\r\n    // Catches *all* errors thrown by client so status can be set consistently.\r\n    try {\r\n        await rc._client.fetch({\r\n            cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\r\n            signal: abortSignal\r\n        });\r\n        await rc._storageCache.setLastFetchStatus('success');\r\n    }\r\n    catch (e) {\r\n        const lastFetchStatus = hasErrorCode(e, \"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */)\r\n            ? 'throttle'\r\n            : 'failure';\r\n        await rc._storageCache.setLastFetchStatus(lastFetchStatus);\r\n        throw e;\r\n    }\r\n}\r\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\r\nfunction getAll(remoteConfig) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce((allConfigs, key) => {\r\n        allConfigs[key] = getValue(remoteConfig, key);\r\n        return allConfigs;\r\n    }, {});\r\n}\r\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\r\nfunction getBoolean(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asBoolean();\r\n}\r\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\r\nfunction getNumber(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asNumber();\r\n}\r\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\r\nfunction getString(remoteConfig, key) {\r\n    return getValue(getModularInstance(remoteConfig), key).asString();\r\n}\r\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\r\nfunction getValue(remoteConfig, key) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    if (!rc._isInitializationComplete) {\r\n        rc._logger.debug(`A value was requested for key \"${key}\" before SDK initialization completed.` +\r\n            ' Await on ensureInitialized if the intent was to get a previously activated value.');\r\n    }\r\n    const activeConfig = rc._storageCache.getActiveConfig();\r\n    if (activeConfig && activeConfig[key] !== undefined) {\r\n        return new Value('remote', activeConfig[key]);\r\n    }\r\n    else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\r\n        return new Value('default', String(rc.defaultConfig[key]));\r\n    }\r\n    rc._logger.debug(`Returning static value for key \"${key}\".` +\r\n        ' Define a default or remote value if this is unintentional.');\r\n    return new Value('static');\r\n}\r\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\r\nfunction setLogLevel(remoteConfig, logLevel) {\r\n    const rc = getModularInstance(remoteConfig);\r\n    switch (logLevel) {\r\n        case 'debug':\r\n            rc._logger.logLevel = LogLevel.DEBUG;\r\n            break;\r\n        case 'silent':\r\n            rc._logger.logLevel = LogLevel.SILENT;\r\n            break;\r\n        default:\r\n            rc._logger.logLevel = LogLevel.ERROR;\r\n    }\r\n}\r\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\r\nfunction getAllKeys(obj1 = {}, obj2 = {}) {\r\n    return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\r\nclass CachingClient {\r\n    constructor(client, storage, storageCache, logger) {\r\n        this.client = client;\r\n        this.storage = storage;\r\n        this.storageCache = storageCache;\r\n        this.logger = logger;\r\n    }\r\n    /**\r\n     * Returns true if the age of the cached fetched configs is less than or equal to\r\n     * {@link Settings#minimumFetchIntervalInSeconds}.\r\n     *\r\n     * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n     * native Fetch API.\r\n     *\r\n     * <p>Visible for testing.\r\n     */\r\n    isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\r\n        // Cache can only be fresh if it's populated.\r\n        if (!lastSuccessfulFetchTimestampMillis) {\r\n            this.logger.debug('Config fetch cache check. Cache unpopulated.');\r\n            return false;\r\n        }\r\n        // Calculates age of cache entry.\r\n        const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\r\n        const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\r\n        this.logger.debug('Config fetch cache check.' +\r\n            ` Cache age millis: ${cacheAgeMillis}.` +\r\n            ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\r\n            ` Is cache hit: ${isCachedDataFresh}.`);\r\n        return isCachedDataFresh;\r\n    }\r\n    async fetch(request) {\r\n        // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\r\n        const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] = await Promise.all([\r\n            this.storage.getLastSuccessfulFetchTimestampMillis(),\r\n            this.storage.getLastSuccessfulFetchResponse()\r\n        ]);\r\n        // Exits early on cache hit.\r\n        if (lastSuccessfulFetchResponse &&\r\n            this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {\r\n            return lastSuccessfulFetchResponse;\r\n        }\r\n        // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\r\n        // that allows the caller to pass an ETag.\r\n        request.eTag =\r\n            lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\r\n        // Falls back to service on cache miss.\r\n        const response = await this.client.fetch(request);\r\n        // Fetch throws for non-success responses, so success is guaranteed here.\r\n        const storageOperations = [\r\n            // Uses write-through cache for consistency with synchronous public API.\r\n            this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\r\n        ];\r\n        if (response.status === 200) {\r\n            // Caches response only if it has changed, ie non-304 responses.\r\n            storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\r\n        }\r\n        await Promise.all(storageOperations);\r\n        return response;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\r\nfunction getUserLanguage(navigatorLanguage = navigator) {\r\n    return (\r\n    // Most reliable, but only supported in Chrome/Firefox.\r\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\r\n        // Supported in most browsers, but returns the language of the browser\r\n        // UI, not the language set in browser settings.\r\n        navigatorLanguage.language\r\n    // Polyfill otherwise.\r\n    );\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\r\nclass RestClient {\r\n    constructor(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\r\n        this.firebaseInstallations = firebaseInstallations;\r\n        this.sdkVersion = sdkVersion;\r\n        this.namespace = namespace;\r\n        this.projectId = projectId;\r\n        this.apiKey = apiKey;\r\n        this.appId = appId;\r\n    }\r\n    /**\r\n     * Fetches from the Remote Config REST API.\r\n     *\r\n     * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n     * connect to the network.\r\n     * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n     * fetch response.\r\n     * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n     */\r\n    async fetch(request) {\r\n        const [installationId, installationToken] = await Promise.all([\r\n            this.firebaseInstallations.getId(),\r\n            this.firebaseInstallations.getToken()\r\n        ]);\r\n        const urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\r\n            'https://firebaseremoteconfig.googleapis.com';\r\n        const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Content-Encoding': 'gzip',\r\n            // Deviates from pure decorator by not passing max-age header since we don't currently have\r\n            // service behavior using that header.\r\n            'If-None-Match': request.eTag || '*'\r\n        };\r\n        const requestBody = {\r\n            /* eslint-disable camelcase */\r\n            sdk_version: this.sdkVersion,\r\n            app_instance_id: installationId,\r\n            app_instance_id_token: installationToken,\r\n            app_id: this.appId,\r\n            language_code: getUserLanguage()\r\n            /* eslint-enable camelcase */\r\n        };\r\n        const options = {\r\n            method: 'POST',\r\n            headers,\r\n            body: JSON.stringify(requestBody)\r\n        };\r\n        // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\r\n        const fetchPromise = fetch(url, options);\r\n        const timeoutPromise = new Promise((_resolve, reject) => {\r\n            // Maps async event listener to Promise API.\r\n            request.signal.addEventListener(() => {\r\n                // Emulates https://heycam.github.io/webidl/#aborterror\r\n                const error = new Error('The operation was aborted.');\r\n                error.name = 'AbortError';\r\n                reject(error);\r\n            });\r\n        });\r\n        let response;\r\n        try {\r\n            await Promise.race([fetchPromise, timeoutPromise]);\r\n            response = await fetchPromise;\r\n        }\r\n        catch (originalError) {\r\n            let errorCode = \"fetch-client-network\" /* ErrorCode.FETCH_NETWORK */;\r\n            if ((originalError === null || originalError === void 0 ? void 0 : originalError.name) === 'AbortError') {\r\n                errorCode = \"fetch-timeout\" /* ErrorCode.FETCH_TIMEOUT */;\r\n            }\r\n            throw ERROR_FACTORY.create(errorCode, {\r\n                originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\r\n            });\r\n        }\r\n        let status = response.status;\r\n        // Normalizes nullable header to optional.\r\n        const responseEtag = response.headers.get('ETag') || undefined;\r\n        let config;\r\n        let state;\r\n        // JSON parsing throws SyntaxError if the response body isn't a JSON string.\r\n        // Requesting application/json and checking for a 200 ensures there's JSON data.\r\n        if (response.status === 200) {\r\n            let responseBody;\r\n            try {\r\n                responseBody = await response.json();\r\n            }\r\n            catch (originalError) {\r\n                throw ERROR_FACTORY.create(\"fetch-client-parse\" /* ErrorCode.FETCH_PARSE */, {\r\n                    originalErrorMessage: originalError === null || originalError === void 0 ? void 0 : originalError.message\r\n                });\r\n            }\r\n            config = responseBody['entries'];\r\n            state = responseBody['state'];\r\n        }\r\n        // Normalizes based on legacy state.\r\n        if (state === 'INSTANCE_STATE_UNSPECIFIED') {\r\n            status = 500;\r\n        }\r\n        else if (state === 'NO_CHANGE') {\r\n            status = 304;\r\n        }\r\n        else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\r\n            // These cases can be fixed remotely, so normalize to safe value.\r\n            config = {};\r\n        }\r\n        // Normalize to exception-based control flow for non-success cases.\r\n        // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\r\n        // differentiating success states (200 from 304; the state body param is undefined in a\r\n        // standard 304).\r\n        if (status !== 304 && status !== 200) {\r\n            throw ERROR_FACTORY.create(\"fetch-status\" /* ErrorCode.FETCH_STATUS */, {\r\n                httpStatus: status\r\n            });\r\n        }\r\n        return { status, eTag: responseEtag, config };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise((resolve, reject) => {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        const timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(() => {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* ErrorCode.FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    const httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\r\nclass RetryingClient {\r\n    constructor(client, storage) {\r\n        this.client = client;\r\n        this.storage = storage;\r\n    }\r\n    async fetch(request) {\r\n        const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\r\n            backoffCount: 0,\r\n            throttleEndTimeMillis: Date.now()\r\n        };\r\n        return this.attemptFetch(request, throttleMetadata);\r\n    }\r\n    /**\r\n     * A recursive helper for attempting a fetch request repeatedly.\r\n     *\r\n     * @throws any non-retriable errors.\r\n     */\r\n    async attemptFetch(request, { throttleEndTimeMillis, backoffCount }) {\r\n        // Starts with a (potentially zero) timeout to support resumption from stored state.\r\n        // Ensures the throttle end time is honored if the last attempt timed out.\r\n        // Note the SDK will never make a request if the fetch timeout expires at this point.\r\n        await setAbortableTimeout(request.signal, throttleEndTimeMillis);\r\n        try {\r\n            const response = await this.client.fetch(request);\r\n            // Note the SDK only clears throttle state if response is success or non-retriable.\r\n            await this.storage.deleteThrottleMetadata();\r\n            return response;\r\n        }\r\n        catch (e) {\r\n            if (!isRetriableError(e)) {\r\n                throw e;\r\n            }\r\n            // Increments backoff state.\r\n            const throttleMetadata = {\r\n                throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\r\n                backoffCount: backoffCount + 1\r\n            };\r\n            // Persists state.\r\n            await this.storage.setThrottleMetadata(throttleMetadata);\r\n            return this.attemptFetch(request, throttleMetadata);\r\n        }\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\r\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\r\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\r\nclass RemoteConfig {\r\n    constructor(\r\n    // Required by FirebaseServiceFactory interface.\r\n    app, \r\n    // JS doesn't support private yet\r\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\r\n    // underscore prefix.\r\n    /**\r\n     * @internal\r\n     */\r\n    _client, \r\n    /**\r\n     * @internal\r\n     */\r\n    _storageCache, \r\n    /**\r\n     * @internal\r\n     */\r\n    _storage, \r\n    /**\r\n     * @internal\r\n     */\r\n    _logger) {\r\n        this.app = app;\r\n        this._client = _client;\r\n        this._storageCache = _storageCache;\r\n        this._storage = _storage;\r\n        this._logger = _logger;\r\n        /**\r\n         * Tracks completion of initialization promise.\r\n         * @internal\r\n         */\r\n        this._isInitializationComplete = false;\r\n        this.settings = {\r\n            fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\r\n            minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\r\n        };\r\n        this.defaultConfig = {};\r\n    }\r\n    get fetchTimeMillis() {\r\n        return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\r\n    }\r\n    get lastFetchStatus() {\r\n        return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\r\nfunction toFirebaseError(event, errorCode) {\r\n    const originalError = event.target.error || undefined;\r\n    return ERROR_FACTORY.create(errorCode, {\r\n        originalErrorMessage: originalError && (originalError === null || originalError === void 0 ? void 0 : originalError.message)\r\n    });\r\n}\r\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\r\nconst APP_NAMESPACE_STORE = 'app_namespace_store';\r\nconst DB_NAME = 'firebase_remote_config';\r\nconst DB_VERSION = 1;\r\n// Visible for testing.\r\nfunction openDatabase() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\r\n            request.onerror = event => {\r\n                reject(toFirebaseError(event, \"storage-open\" /* ErrorCode.STORAGE_OPEN */));\r\n            };\r\n            request.onsuccess = event => {\r\n                resolve(event.target.result);\r\n            };\r\n            request.onupgradeneeded = event => {\r\n                const db = event.target.result;\r\n                // We don't use 'break' in this switch statement, the fall-through\r\n                // behavior is what we want, because if there are multiple versions between\r\n                // the old version and the current version, we want ALL the migrations\r\n                // that correspond to those versions to run, not only the last one.\r\n                // eslint-disable-next-line default-case\r\n                switch (event.oldVersion) {\r\n                    case 0:\r\n                        db.createObjectStore(APP_NAMESPACE_STORE, {\r\n                            keyPath: 'compositeKey'\r\n                        });\r\n                }\r\n            };\r\n        }\r\n        catch (error) {\r\n            reject(ERROR_FACTORY.create(\"storage-open\" /* ErrorCode.STORAGE_OPEN */, {\r\n                originalErrorMessage: error === null || error === void 0 ? void 0 : error.message\r\n            }));\r\n        }\r\n    });\r\n}\r\n/**\r\n * Abstracts data persistence.\r\n */\r\nclass Storage {\r\n    /**\r\n     * @param appId enables storage segmentation by app (ID + name).\r\n     * @param appName enables storage segmentation by app (ID + name).\r\n     * @param namespace enables storage segmentation by namespace.\r\n     */\r\n    constructor(appId, appName, namespace, openDbPromise = openDatabase()) {\r\n        this.appId = appId;\r\n        this.appName = appName;\r\n        this.namespace = namespace;\r\n        this.openDbPromise = openDbPromise;\r\n    }\r\n    getLastFetchStatus() {\r\n        return this.get('last_fetch_status');\r\n    }\r\n    setLastFetchStatus(status) {\r\n        return this.set('last_fetch_status', status);\r\n    }\r\n    // This is comparable to a cache entry timestamp. If we need to expire other data, we could\r\n    // consider adding timestamp to all storage records and an optional max age arg to getters.\r\n    getLastSuccessfulFetchTimestampMillis() {\r\n        return this.get('last_successful_fetch_timestamp_millis');\r\n    }\r\n    setLastSuccessfulFetchTimestampMillis(timestamp) {\r\n        return this.set('last_successful_fetch_timestamp_millis', timestamp);\r\n    }\r\n    getLastSuccessfulFetchResponse() {\r\n        return this.get('last_successful_fetch_response');\r\n    }\r\n    setLastSuccessfulFetchResponse(response) {\r\n        return this.set('last_successful_fetch_response', response);\r\n    }\r\n    getActiveConfig() {\r\n        return this.get('active_config');\r\n    }\r\n    setActiveConfig(config) {\r\n        return this.set('active_config', config);\r\n    }\r\n    getActiveConfigEtag() {\r\n        return this.get('active_config_etag');\r\n    }\r\n    setActiveConfigEtag(etag) {\r\n        return this.set('active_config_etag', etag);\r\n    }\r\n    getThrottleMetadata() {\r\n        return this.get('throttle_metadata');\r\n    }\r\n    setThrottleMetadata(metadata) {\r\n        return this.set('throttle_metadata', metadata);\r\n    }\r\n    deleteThrottleMetadata() {\r\n        return this.delete('throttle_metadata');\r\n    }\r\n    async get(key) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.get(compositeKey);\r\n                request.onerror = event => {\r\n                    reject(toFirebaseError(event, \"storage-get\" /* ErrorCode.STORAGE_GET */));\r\n                };\r\n                request.onsuccess = event => {\r\n                    const result = event.target.result;\r\n                    if (result) {\r\n                        resolve(result.value);\r\n                    }\r\n                    else {\r\n                        resolve(undefined);\r\n                    }\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-get\" /* ErrorCode.STORAGE_GET */, {\r\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    async set(key, value) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.put({\r\n                    compositeKey,\r\n                    value\r\n                });\r\n                request.onerror = (event) => {\r\n                    reject(toFirebaseError(event, \"storage-set\" /* ErrorCode.STORAGE_SET */));\r\n                };\r\n                request.onsuccess = () => {\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-set\" /* ErrorCode.STORAGE_SET */, {\r\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    async delete(key) {\r\n        const db = await this.openDbPromise;\r\n        return new Promise((resolve, reject) => {\r\n            const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\r\n            const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\r\n            const compositeKey = this.createCompositeKey(key);\r\n            try {\r\n                const request = objectStore.delete(compositeKey);\r\n                request.onerror = (event) => {\r\n                    reject(toFirebaseError(event, \"storage-delete\" /* ErrorCode.STORAGE_DELETE */));\r\n                };\r\n                request.onsuccess = () => {\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(ERROR_FACTORY.create(\"storage-delete\" /* ErrorCode.STORAGE_DELETE */, {\r\n                    originalErrorMessage: e === null || e === void 0 ? void 0 : e.message\r\n                }));\r\n            }\r\n        });\r\n    }\r\n    // Facilitates composite key functionality (which is unsupported in IE).\r\n    createCompositeKey(key) {\r\n        return [this.appId, this.appName, this.namespace, key].join();\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\r\nclass StorageCache {\r\n    constructor(storage) {\r\n        this.storage = storage;\r\n    }\r\n    /**\r\n     * Memory-only getters\r\n     */\r\n    getLastFetchStatus() {\r\n        return this.lastFetchStatus;\r\n    }\r\n    getLastSuccessfulFetchTimestampMillis() {\r\n        return this.lastSuccessfulFetchTimestampMillis;\r\n    }\r\n    getActiveConfig() {\r\n        return this.activeConfig;\r\n    }\r\n    /**\r\n     * Read-ahead getter\r\n     */\r\n    async loadFromStorage() {\r\n        const lastFetchStatusPromise = this.storage.getLastFetchStatus();\r\n        const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\r\n        const activeConfigPromise = this.storage.getActiveConfig();\r\n        // Note:\r\n        // 1. we consistently check for undefined to avoid clobbering defined values\r\n        //   in memory\r\n        // 2. we defer awaiting to improve readability, as opposed to destructuring\r\n        //   a Promise.all result, for example\r\n        const lastFetchStatus = await lastFetchStatusPromise;\r\n        if (lastFetchStatus) {\r\n            this.lastFetchStatus = lastFetchStatus;\r\n        }\r\n        const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\r\n        if (lastSuccessfulFetchTimestampMillis) {\r\n            this.lastSuccessfulFetchTimestampMillis =\r\n                lastSuccessfulFetchTimestampMillis;\r\n        }\r\n        const activeConfig = await activeConfigPromise;\r\n        if (activeConfig) {\r\n            this.activeConfig = activeConfig;\r\n        }\r\n    }\r\n    /**\r\n     * Write-through setters\r\n     */\r\n    setLastFetchStatus(status) {\r\n        this.lastFetchStatus = status;\r\n        return this.storage.setLastFetchStatus(status);\r\n    }\r\n    setLastSuccessfulFetchTimestampMillis(timestampMillis) {\r\n        this.lastSuccessfulFetchTimestampMillis = timestampMillis;\r\n        return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\r\n    }\r\n    setActiveConfig(activeConfig) {\r\n        this.activeConfig = activeConfig;\r\n        return this.storage.setActiveConfig(activeConfig);\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction registerRemoteConfig() {\r\n    _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n    function remoteConfigFactory(container, { instanceIdentifier: namespace }) {\r\n        /* Dependencies */\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        // The following call will always succeed because rc has `import '@firebase/installations'`\r\n        const installations = container\r\n            .getProvider('installations-internal')\r\n            .getImmediate();\r\n        // Guards against the SDK being used in non-browser environments.\r\n        if (typeof window === 'undefined') {\r\n            throw ERROR_FACTORY.create(\"registration-window\" /* ErrorCode.REGISTRATION_WINDOW */);\r\n        }\r\n        // Guards against the SDK being used when indexedDB is not available.\r\n        if (!isIndexedDBAvailable()) {\r\n            throw ERROR_FACTORY.create(\"indexed-db-unavailable\" /* ErrorCode.INDEXED_DB_UNAVAILABLE */);\r\n        }\r\n        // Normalizes optional inputs.\r\n        const { projectId, apiKey, appId } = app.options;\r\n        if (!projectId) {\r\n            throw ERROR_FACTORY.create(\"registration-project-id\" /* ErrorCode.REGISTRATION_PROJECT_ID */);\r\n        }\r\n        if (!apiKey) {\r\n            throw ERROR_FACTORY.create(\"registration-api-key\" /* ErrorCode.REGISTRATION_API_KEY */);\r\n        }\r\n        if (!appId) {\r\n            throw ERROR_FACTORY.create(\"registration-app-id\" /* ErrorCode.REGISTRATION_APP_ID */);\r\n        }\r\n        namespace = namespace || 'firebase';\r\n        const storage = new Storage(appId, app.name, namespace);\r\n        const storageCache = new StorageCache(storage);\r\n        const logger = new Logger(name);\r\n        // Sets ERROR as the default log level.\r\n        // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\r\n        logger.logLevel = LogLevel.ERROR;\r\n        const restClient = new RestClient(installations, \r\n        // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\r\n        SDK_VERSION, namespace, projectId, apiKey, appId);\r\n        const retryingClient = new RetryingClient(restClient, storage);\r\n        const cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\r\n        const remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger);\r\n        // Starts warming cache.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        ensureInitialized(remoteConfigInstance);\r\n        return remoteConfigInstance;\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\r\n// It's not possible to stub standalone functions from the same module.\r\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\r\nasync function fetchAndActivate(remoteConfig) {\r\n    remoteConfig = getModularInstance(remoteConfig);\r\n    await fetchConfig(remoteConfig);\r\n    return activate(remoteConfig);\r\n}\r\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\r\nasync function isSupported() {\r\n    if (!isIndexedDBAvailable()) {\r\n        return false;\r\n    }\r\n    try {\r\n        const isDBOpenable = await validateIndexedDBOpenable();\r\n        return isDBOpenable;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\n\n/**\r\n * Firebase Remote Config\r\n *\r\n * @packageDocumentation\r\n */\r\n/** register component and version */\r\nregisterRemoteConfig();\n\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };\n\n", "import { Observable } from 'rxjs';\nimport { ensureInitialized, getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'firebase/remote-config';\n\nfunction parameter$(_a) {\n    var remoteConfig = _a.remoteConfig, key = _a.key, getter = _a.getter;\n    return new Observable(function (subscriber) {\n        ensureInitialized(remoteConfig).then(function () {\n            // 'this' for the getter loses context in the next()\n            // call, so it needs to be bound.\n            var boundGetter = getter.bind(remoteConfig);\n            subscriber.next(boundGetter(remoteConfig, key));\n        });\n    });\n}\nfunction getValue(remoteConfig, key) {\n    var getter = getValue$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getString(remoteConfig, key) {\n    var getter = getString$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getNumber(remoteConfig, key) {\n    var getter = getNumber$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getBoolean(remoteConfig, key) {\n    var getter = getBoolean$1;\n    return parameter$({ remoteConfig: remoteConfig, key: key, getter: getter });\n}\nfunction getAll(remoteConfig) {\n    var getter = getAll$1;\n    // No key is needed for getAll()\n    return parameter$({ remoteConfig: remoteConfig, key: '', getter: getter });\n}\n\nexport { getAll, getBoolean, getNumber, getString, getValue };\n\n", "import { ɵgetAllInstancesOf, ɵisSupportedError, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { from, timer } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { isSupported as isSupported$1, activate as activate$1, ensureInitialized as ensureInitialized$1, fetchAndActivate as fetchAndActivate$1, fetchConfig as fetchConfig$1, getAll as getAll$2, getBoolean as getBoolean$2, getNumber as getNumber$2, getRemoteConfig as getRemoteConfig$1, getString as getString$2, getValue as getValue$2, setLogLevel as setLogLevel$1 } from 'firebase/remote-config';\nexport * from 'firebase/remote-config';\nimport { getValue as getValue$1, getString as getString$1, getNumber as getNumber$1, getBoolean as getBoolean$1, getAll as getAll$1 } from 'rxfire/remote-config';\nclass RemoteConfig {\n  constructor(remoteConfig) {\n    return remoteConfig;\n  }\n}\nconst REMOTE_CONFIG_PROVIDER_NAME = 'remote-config';\nclass RemoteConfigInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME);\n  }\n}\nconst remoteConfigInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(REMOTE_CONFIG_PROVIDER_NAME))), distinct());\nconst isRemoteConfigSupportedValueSymbol = '__angularfire_symbol__remoteConfigIsSupportedValue';\nconst isRemoteConfigSupportedPromiseSymbol = '__angularfire_symbol__remoteConfigIsSupported';\nglobalThis[isRemoteConfigSupportedPromiseSymbol] ||= isSupported$1().then(it => globalThis[isRemoteConfigSupportedValueSymbol] = it).catch(() => globalThis[isRemoteConfigSupportedValueSymbol] = false);\nconst isRemoteConfigSupportedFactory = {\n  async: () => globalThis[isRemoteConfigSupportedPromiseSymbol],\n  sync: () => {\n    const ret = globalThis[isRemoteConfigSupportedValueSymbol];\n    if (ret === undefined) {\n      throw new Error(ɵisSupportedError('RemoteConfig'));\n    }\n    return ret;\n  }\n};\nconst PROVIDED_REMOTE_CONFIG_INSTANCES = new InjectionToken('angularfire2.remote-config-instances');\nfunction defaultRemoteConfigInstanceFactory(provided, defaultApp) {\n  if (!isRemoteConfigSupportedFactory.sync()) {\n    return null;\n  }\n  const defaultRemoteConfig = ɵgetDefaultInstanceOf(REMOTE_CONFIG_PROVIDER_NAME, provided, defaultApp);\n  return defaultRemoteConfig && new RemoteConfig(defaultRemoteConfig);\n}\nfunction remoteConfigInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!isRemoteConfigSupportedFactory.sync()) {\n      return null;\n    }\n    const remoteConfig = zone.runOutsideAngular(() => fn(injector));\n    return new RemoteConfig(remoteConfig);\n  };\n}\nconst REMOTE_CONFIG_INSTANCES_PROVIDER = {\n  provide: RemoteConfigInstances,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES]]\n};\nconst DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER = {\n  provide: RemoteConfig,\n  useFactory: defaultRemoteConfigInstanceFactory,\n  deps: [[new Optional(), PROVIDED_REMOTE_CONFIG_INSTANCES], FirebaseApp]\n};\nclass RemoteConfigModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'rc');\n  }\n  static ɵfac = function RemoteConfigModule_Factory(t) {\n    return new (t || RemoteConfigModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RemoteConfigModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n      provide: APP_INITIALIZER,\n      useValue: isRemoteConfigSupportedFactory.async,\n      multi: true\n    }]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(RemoteConfigModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_REMOTE_CONFIG_INSTANCE_PROVIDER, REMOTE_CONFIG_INSTANCES_PROVIDER, {\n        provide: APP_INITIALIZER,\n        useValue: isRemoteConfigSupportedFactory.async,\n        multi: true\n      }]\n    }]\n  }], () => [], null);\n})();\nfunction provideRemoteConfig(fn, ...deps) {\n  return {\n    ngModule: RemoteConfigModule,\n    providers: [{\n      provide: PROVIDED_REMOTE_CONFIG_INSTANCES,\n      useFactory: remoteConfigInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getValueChanges = ɵzoneWrap(getValue$1, true);\nconst getStringChanges = ɵzoneWrap(getString$1, true);\nconst getNumberChanges = ɵzoneWrap(getNumber$1, true);\nconst getBooleanChanges = ɵzoneWrap(getBoolean$1, true);\nconst getAllChanges = ɵzoneWrap(getAll$1, true);\nconst isSupported = isRemoteConfigSupportedFactory.async;\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst activate = ɵzoneWrap(activate$1, true);\nconst ensureInitialized = ɵzoneWrap(ensureInitialized$1, true);\nconst fetchAndActivate = ɵzoneWrap(fetchAndActivate$1, true);\nconst fetchConfig = ɵzoneWrap(fetchConfig$1, true);\nconst getAll = ɵzoneWrap(getAll$2, true);\nconst getBoolean = ɵzoneWrap(getBoolean$2, true);\nconst getNumber = ɵzoneWrap(getNumber$2, true);\nconst getRemoteConfig = ɵzoneWrap(getRemoteConfig$1, true);\nconst getString = ɵzoneWrap(getString$2, true);\nconst getValue = ɵzoneWrap(getValue$2, true);\nconst setLogLevel = ɵzoneWrap(setLogLevel$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RemoteConfig, RemoteConfigInstances, RemoteConfigModule, activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getAllChanges, getBoolean, getBooleanChanges, getNumber, getNumberChanges, getRemoteConfig, getString, getStringChanges, getValue, getValueChanges, isSupported, provideRemoteConfig, remoteConfigInstance$, setLogLevel };\n"],
  "mappings": "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",
  "names": ["getValue", "getString", "getNumber", "getBoolean", "getAll", "RemoteConfig", "getValue", "getString", "getNumber", "getBoolean", "getAll", "isSupported", "activate", "ensureInitialized", "fetchAndActivate", "fetchConfig", "getRemoteConfig", "setLogLevel"]
}
