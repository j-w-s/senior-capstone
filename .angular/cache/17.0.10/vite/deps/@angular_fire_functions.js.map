{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/functions/dist/index.esm2017.js", "../../../../../node_modules/rxfire/functions/index.esm.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-functions.mjs"],
  "sourcesContent": ["import { _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\nimport { FirebaseError, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\r\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\r\nfunction mapValues(\r\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\no, f) {\r\n    const result = {};\r\n    for (const key in o) {\r\n        if (o.hasOwnProperty(key)) {\r\n            result[key] = f(o[key]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\r\nfunction encode(data) {\r\n    if (data == null) {\r\n        return null;\r\n    }\r\n    if (data instanceof Number) {\r\n        data = data.valueOf();\r\n    }\r\n    if (typeof data === 'number' && isFinite(data)) {\r\n        // Any number in JS is safe to put directly in JSON and parse as a double\r\n        // without any loss of precision.\r\n        return data;\r\n    }\r\n    if (data === true || data === false) {\r\n        return data;\r\n    }\r\n    if (Object.prototype.toString.call(data) === '[object String]') {\r\n        return data;\r\n    }\r\n    if (data instanceof Date) {\r\n        return data.toISOString();\r\n    }\r\n    if (Array.isArray(data)) {\r\n        return data.map(x => encode(x));\r\n    }\r\n    if (typeof data === 'function' || typeof data === 'object') {\r\n        return mapValues(data, x => encode(x));\r\n    }\r\n    // If we got this far, the data is not encodable.\r\n    throw new Error('Data cannot be encoded in JSON: ' + data);\r\n}\r\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\r\nfunction decode(json) {\r\n    if (json == null) {\r\n        return json;\r\n    }\r\n    if (json['@type']) {\r\n        switch (json['@type']) {\r\n            case LONG_TYPE:\r\n            // Fall through and handle this the same as unsigned.\r\n            case UNSIGNED_LONG_TYPE: {\r\n                // Technically, this could work return a valid number for malformed\r\n                // data if there was a number followed by garbage. But it's just not\r\n                // worth all the extra code to detect that case.\r\n                const value = Number(json['value']);\r\n                if (isNaN(value)) {\r\n                    throw new Error('Data cannot be decoded from JSON: ' + json);\r\n                }\r\n                return value;\r\n            }\r\n            default: {\r\n                throw new Error('Data cannot be decoded from JSON: ' + json);\r\n            }\r\n        }\r\n    }\r\n    if (Array.isArray(json)) {\r\n        return json.map(x => decode(x));\r\n    }\r\n    if (typeof json === 'function' || typeof json === 'object') {\r\n        return mapValues(json, x => decode(x));\r\n    }\r\n    // Anything else is safe to return.\r\n    return json;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Functions.\r\n */\r\nconst FUNCTIONS_TYPE = 'functions';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\r\nconst errorCodeMap = {\r\n    OK: 'ok',\r\n    CANCELLED: 'cancelled',\r\n    UNKNOWN: 'unknown',\r\n    INVALID_ARGUMENT: 'invalid-argument',\r\n    DEADLINE_EXCEEDED: 'deadline-exceeded',\r\n    NOT_FOUND: 'not-found',\r\n    ALREADY_EXISTS: 'already-exists',\r\n    PERMISSION_DENIED: 'permission-denied',\r\n    UNAUTHENTICATED: 'unauthenticated',\r\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\r\n    FAILED_PRECONDITION: 'failed-precondition',\r\n    ABORTED: 'aborted',\r\n    OUT_OF_RANGE: 'out-of-range',\r\n    UNIMPLEMENTED: 'unimplemented',\r\n    INTERNAL: 'internal',\r\n    UNAVAILABLE: 'unavailable',\r\n    DATA_LOSS: 'data-loss'\r\n};\r\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\r\nclass FunctionsError extends FirebaseError {\r\n    constructor(\r\n    /**\r\n     * A standard error code that will be returned to the client. This also\r\n     * determines the HTTP status code of the response, as defined in code.proto.\r\n     */\r\n    code, message, \r\n    /**\r\n     * Extra data to be converted to JSON and included in the error response.\r\n     */\r\n    details) {\r\n        super(`${FUNCTIONS_TYPE}/${code}`, message || '');\r\n        this.details = details;\r\n    }\r\n}\r\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\r\nfunction codeForHTTPStatus(status) {\r\n    // Make sure any successful status is OK.\r\n    if (status >= 200 && status < 300) {\r\n        return 'ok';\r\n    }\r\n    switch (status) {\r\n        case 0:\r\n            // This can happen if the server returns 500.\r\n            return 'internal';\r\n        case 400:\r\n            return 'invalid-argument';\r\n        case 401:\r\n            return 'unauthenticated';\r\n        case 403:\r\n            return 'permission-denied';\r\n        case 404:\r\n            return 'not-found';\r\n        case 409:\r\n            return 'aborted';\r\n        case 429:\r\n            return 'resource-exhausted';\r\n        case 499:\r\n            return 'cancelled';\r\n        case 500:\r\n            return 'internal';\r\n        case 501:\r\n            return 'unimplemented';\r\n        case 503:\r\n            return 'unavailable';\r\n        case 504:\r\n            return 'deadline-exceeded';\r\n    }\r\n    return 'unknown';\r\n}\r\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\r\nfunction _errorForResponse(status, bodyJSON) {\r\n    let code = codeForHTTPStatus(status);\r\n    // Start with reasonable defaults from the status code.\r\n    let description = code;\r\n    let details = undefined;\r\n    // Then look through the body for explicit details.\r\n    try {\r\n        const errorJSON = bodyJSON && bodyJSON.error;\r\n        if (errorJSON) {\r\n            const status = errorJSON.status;\r\n            if (typeof status === 'string') {\r\n                if (!errorCodeMap[status]) {\r\n                    // They must've included an unknown error code in the body.\r\n                    return new FunctionsError('internal', 'internal');\r\n                }\r\n                code = errorCodeMap[status];\r\n                // TODO(klimt): Add better default descriptions for error enums.\r\n                // The default description needs to be updated for the new code.\r\n                description = status;\r\n            }\r\n            const message = errorJSON.message;\r\n            if (typeof message === 'string') {\r\n                description = message;\r\n            }\r\n            details = errorJSON.details;\r\n            if (details !== undefined) {\r\n                details = decode(details);\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        // If we couldn't parse explicit error data, that's fine.\r\n    }\r\n    if (code === 'ok') {\r\n        // Technically, there's an edge case where a developer could explicitly\r\n        // return an error code of OK, and we will treat it as success, but that\r\n        // seems reasonable.\r\n        return null;\r\n    }\r\n    return new FunctionsError(code, description, details);\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\r\nclass ContextProvider {\r\n    constructor(authProvider, messagingProvider, appCheckProvider) {\r\n        this.auth = null;\r\n        this.messaging = null;\r\n        this.appCheck = null;\r\n        this.auth = authProvider.getImmediate({ optional: true });\r\n        this.messaging = messagingProvider.getImmediate({\r\n            optional: true\r\n        });\r\n        if (!this.auth) {\r\n            authProvider.get().then(auth => (this.auth = auth), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.messaging) {\r\n            messagingProvider.get().then(messaging => (this.messaging = messaging), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n        if (!this.appCheck) {\r\n            appCheckProvider.get().then(appCheck => (this.appCheck = appCheck), () => {\r\n                /* get() never rejects */\r\n            });\r\n        }\r\n    }\r\n    async getAuthToken() {\r\n        if (!this.auth) {\r\n            return undefined;\r\n        }\r\n        try {\r\n            const token = await this.auth.getToken();\r\n            return token === null || token === void 0 ? void 0 : token.accessToken;\r\n        }\r\n        catch (e) {\r\n            // If there's any error when trying to get the auth token, leave it off.\r\n            return undefined;\r\n        }\r\n    }\r\n    async getMessagingToken() {\r\n        if (!this.messaging ||\r\n            !('Notification' in self) ||\r\n            Notification.permission !== 'granted') {\r\n            return undefined;\r\n        }\r\n        try {\r\n            return await this.messaging.getToken();\r\n        }\r\n        catch (e) {\r\n            // We don't warn on this, because it usually means messaging isn't set up.\r\n            // console.warn('Failed to retrieve instance id token.', e);\r\n            // If there's any error when trying to get the token, leave it off.\r\n            return undefined;\r\n        }\r\n    }\r\n    async getAppCheckToken(limitedUseAppCheckTokens) {\r\n        if (this.appCheck) {\r\n            const result = limitedUseAppCheckTokens\r\n                ? await this.appCheck.getLimitedUseToken()\r\n                : await this.appCheck.getToken();\r\n            if (result.error) {\r\n                // Do not send the App Check header to the functions endpoint if\r\n                // there was an error from the App Check exchange endpoint. The App\r\n                // Check SDK will already have logged the error to console.\r\n                return null;\r\n            }\r\n            return result.token;\r\n        }\r\n        return null;\r\n    }\r\n    async getContext(limitedUseAppCheckTokens) {\r\n        const authToken = await this.getAuthToken();\r\n        const messagingToken = await this.getMessagingToken();\r\n        const appCheckToken = await this.getAppCheckToken(limitedUseAppCheckTokens);\r\n        return { authToken, messagingToken, appCheckToken };\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst DEFAULT_REGION = 'us-central1';\r\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\r\nfunction failAfter(millis) {\r\n    // Node timers and browser timers are fundamentally incompatible, but we\r\n    // don't care about the value here\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    let timer = null;\r\n    return {\r\n        promise: new Promise((_, reject) => {\r\n            timer = setTimeout(() => {\r\n                reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\r\n            }, millis);\r\n        }),\r\n        cancel: () => {\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n        }\r\n    };\r\n}\r\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\r\nclass FunctionsService {\r\n    /**\r\n     * Creates a new Functions service for the given app.\r\n     * @param app - The FirebaseApp to use.\r\n     */\r\n    constructor(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain = DEFAULT_REGION, fetchImpl) {\r\n        this.app = app;\r\n        this.fetchImpl = fetchImpl;\r\n        this.emulatorOrigin = null;\r\n        this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider);\r\n        // Cancels all ongoing requests when resolved.\r\n        this.cancelAllRequests = new Promise(resolve => {\r\n            this.deleteService = () => {\r\n                return Promise.resolve(resolve());\r\n            };\r\n        });\r\n        // Resolve the region or custom domain overload by attempting to parse it.\r\n        try {\r\n            const url = new URL(regionOrCustomDomain);\r\n            this.customDomain = url.origin;\r\n            this.region = DEFAULT_REGION;\r\n        }\r\n        catch (e) {\r\n            this.customDomain = null;\r\n            this.region = regionOrCustomDomain;\r\n        }\r\n    }\r\n    _delete() {\r\n        return this.deleteService();\r\n    }\r\n    /**\r\n     * Returns the URL for a callable with the given name.\r\n     * @param name - The name of the callable.\r\n     * @internal\r\n     */\r\n    _url(name) {\r\n        const projectId = this.app.options.projectId;\r\n        if (this.emulatorOrigin !== null) {\r\n            const origin = this.emulatorOrigin;\r\n            return `${origin}/${projectId}/${this.region}/${name}`;\r\n        }\r\n        if (this.customDomain !== null) {\r\n            return `${this.customDomain}/${name}`;\r\n        }\r\n        return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\r\n    }\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\r\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\r\n    functionsInstance.emulatorOrigin = `http://${host}:${port}`;\r\n}\r\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallable$1(functionsInstance, name, options) {\r\n    return (data => {\r\n        return call(functionsInstance, name, data, options || {});\r\n    });\r\n}\r\n/**\r\n * Returns a reference to the callable https trigger with the given url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallableFromURL$1(functionsInstance, url, options) {\r\n    return (data => {\r\n        return callAtURL(functionsInstance, url, data, options || {});\r\n    });\r\n}\r\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\r\nasync function postJSON(url, body, headers, fetchImpl) {\r\n    headers['Content-Type'] = 'application/json';\r\n    let response;\r\n    try {\r\n        response = await fetchImpl(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n            headers\r\n        });\r\n    }\r\n    catch (e) {\r\n        // This could be an unhandled error on the backend, or it could be a\r\n        // network error. There's no way to know, since an unhandled error on the\r\n        // backend will fail to set the proper CORS header, and thus will be\r\n        // treated as a network error by fetch.\r\n        return {\r\n            status: 0,\r\n            json: null\r\n        };\r\n    }\r\n    let json = null;\r\n    try {\r\n        json = await response.json();\r\n    }\r\n    catch (e) {\r\n        // If we fail to parse JSON, it will fail the same as an empty body.\r\n    }\r\n    return {\r\n        status: response.status,\r\n        json\r\n    };\r\n}\r\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\r\nfunction call(functionsInstance, name, data, options) {\r\n    const url = functionsInstance._url(name);\r\n    return callAtURL(functionsInstance, url, data, options);\r\n}\r\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param url The url of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\r\nasync function callAtURL(functionsInstance, url, data, options) {\r\n    // Encode any special types, such as dates, in the input data.\r\n    data = encode(data);\r\n    const body = { data };\r\n    // Add a header for the authToken.\r\n    const headers = {};\r\n    const context = await functionsInstance.contextProvider.getContext(options.limitedUseAppCheckTokens);\r\n    if (context.authToken) {\r\n        headers['Authorization'] = 'Bearer ' + context.authToken;\r\n    }\r\n    if (context.messagingToken) {\r\n        headers['Firebase-Instance-ID-Token'] = context.messagingToken;\r\n    }\r\n    if (context.appCheckToken !== null) {\r\n        headers['X-Firebase-AppCheck'] = context.appCheckToken;\r\n    }\r\n    // Default timeout to 70s, but let the options override it.\r\n    const timeout = options.timeout || 70000;\r\n    const failAfterHandle = failAfter(timeout);\r\n    const response = await Promise.race([\r\n        postJSON(url, body, headers, functionsInstance.fetchImpl),\r\n        failAfterHandle.promise,\r\n        functionsInstance.cancelAllRequests\r\n    ]);\r\n    // Always clear the failAfter timeout\r\n    failAfterHandle.cancel();\r\n    // If service was deleted, interrupted response throws an error.\r\n    if (!response) {\r\n        throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\r\n    }\r\n    // Check for an error status, regardless of http status.\r\n    const error = _errorForResponse(response.status, response.json);\r\n    if (error) {\r\n        throw error;\r\n    }\r\n    if (!response.json) {\r\n        throw new FunctionsError('internal', 'Response is not valid JSON object.');\r\n    }\r\n    let responseData = response.json.data;\r\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\r\n    // backwards compatibility.\r\n    if (typeof responseData === 'undefined') {\r\n        responseData = response.json.result;\r\n    }\r\n    if (typeof responseData === 'undefined') {\r\n        // Consider the response malformed.\r\n        throw new FunctionsError('internal', 'Response is missing data field.');\r\n    }\r\n    // Decode any special types, such as dates, in the returned data.\r\n    const decodedData = decode(responseData);\r\n    return { data: decodedData };\r\n}\n\nconst name = \"@firebase/functions\";\nconst version = \"0.11.0\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst AUTH_INTERNAL_NAME = 'auth-internal';\r\nconst APP_CHECK_INTERNAL_NAME = 'app-check-internal';\r\nconst MESSAGING_INTERNAL_NAME = 'messaging-internal';\r\nfunction registerFunctions(fetchImpl, variant) {\r\n    const factory = (container, { instanceIdentifier: regionOrCustomDomain }) => {\r\n        // Dependencies\r\n        const app = container.getProvider('app').getImmediate();\r\n        const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\r\n        const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\r\n        const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n        return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\r\n    };\r\n    _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* ComponentType.PUBLIC */).setMultipleInstances(true));\r\n    registerVersion(name, version, variant);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\r\nfunction getFunctions(app = getApp(), regionOrCustomDomain = DEFAULT_REGION) {\r\n    // Dependencies\r\n    const functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\r\n    const functionsInstance = functionsProvider.getImmediate({\r\n        identifier: regionOrCustomDomain\r\n    });\r\n    const emulator = getDefaultEmulatorHostnameAndPort('functions');\r\n    if (emulator) {\r\n        connectFunctionsEmulator(functionsInstance, ...emulator);\r\n    }\r\n    return functionsInstance;\r\n}\r\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\r\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\r\n    connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\r\n}\r\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallable(functionsInstance, name, options) {\r\n    return httpsCallable$1(getModularInstance(functionsInstance), name, options);\r\n}\r\n/**\r\n * Returns a reference to the callable HTTPS trigger with the specified url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\r\nfunction httpsCallableFromURL(functionsInstance, url, options) {\r\n    return httpsCallableFromURL$1(getModularInstance(functionsInstance), url, options);\r\n}\n\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\r\nregisterFunctions(fetch.bind(self));\n\nexport { connectFunctionsEmulator, getFunctions, httpsCallable, httpsCallableFromURL };\n\n", "import { httpsCallable as httpsCallable$1 } from 'firebase/functions';\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction httpsCallable(functions, name, options) {\n    var callable = httpsCallable$1(functions, name, options);\n    return function (data) {\n        return from(callable(data)).pipe(map(function (r) { return r.data; }));\n    };\n}\n\nexport { httpsCallable };\n\n", "import * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵAppCheckInstances, ɵzoneWrap } from '@angular/fire';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { from, timer } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport { httpsCallable as httpsCallable$1 } from 'rxfire/functions';\nimport { connectFunctionsEmulator as connectFunctionsEmulator$1, getFunctions as getFunctions$1, httpsCallable as httpsCallable$2, httpsCallableFromURL as httpsCallableFromURL$1 } from 'firebase/functions';\nexport * from 'firebase/functions';\nclass Functions {\n  constructor(functions) {\n    return functions;\n  }\n}\nconst FUNCTIONS_PROVIDER_NAME = 'functions';\nclass FunctionsInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(FUNCTIONS_PROVIDER_NAME);\n  }\n}\nconst functionInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(FUNCTIONS_PROVIDER_NAME))), distinct());\nconst PROVIDED_FUNCTIONS_INSTANCES = new InjectionToken('angularfire2.functions-instances');\nfunction defaultFunctionsInstanceFactory(provided, defaultApp) {\n  const defaultAuth = ɵgetDefaultInstanceOf(FUNCTIONS_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Functions(defaultAuth);\n}\nfunction functionsInstanceFactory(fn) {\n  return (zone, injector) => {\n    const functions = zone.runOutsideAngular(() => fn(injector));\n    return new Functions(functions);\n  };\n}\nconst FUNCTIONS_INSTANCES_PROVIDER = {\n  provide: FunctionsInstances,\n  deps: [[new Optional(), PROVIDED_FUNCTIONS_INSTANCES]]\n};\nconst DEFAULT_FUNCTIONS_INSTANCE_PROVIDER = {\n  provide: Functions,\n  useFactory: defaultFunctionsInstanceFactory,\n  deps: [[new Optional(), PROVIDED_FUNCTIONS_INSTANCES], FirebaseApp]\n};\nclass FunctionsModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'fn');\n  }\n  static ɵfac = function FunctionsModule_Factory(t) {\n    return new (t || FunctionsModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FunctionsModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_FUNCTIONS_INSTANCE_PROVIDER, FUNCTIONS_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FunctionsModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_FUNCTIONS_INSTANCE_PROVIDER, FUNCTIONS_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideFunctions(fn, ...deps) {\n  return {\n    ngModule: FunctionsModule,\n    providers: [{\n      provide: PROVIDED_FUNCTIONS_INSTANCES,\n      useFactory: functionsInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps,\n      // Defensively load Auth first, if provided\n      [new Optional(), AuthInstances], [new Optional(), ɵAppCheckInstances], ...deps]\n    }]\n  };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst httpsCallableData = ɵzoneWrap(httpsCallable$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectFunctionsEmulator = ɵzoneWrap(connectFunctionsEmulator$1, true);\nconst getFunctions = ɵzoneWrap(getFunctions$1, true);\nconst httpsCallable = ɵzoneWrap(httpsCallable$2, true);\nconst httpsCallableFromURL = ɵzoneWrap(httpsCallableFromURL$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Functions, FunctionsInstances, FunctionsModule, connectFunctionsEmulator, functionInstance$, getFunctions, httpsCallable, httpsCallableData, httpsCallableFromURL, provideFunctions };\n"],
  "mappings": "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",
  "names": ["status", "timer", "name", "httpsCallable", "name", "httpsCallable", "connectFunctionsEmulator", "getFunctions", "httpsCallableFromURL"]
}
