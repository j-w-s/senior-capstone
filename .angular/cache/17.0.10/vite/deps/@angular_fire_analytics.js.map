{
  "version": 3,
  "sources": ["../../../../../node_modules/@firebase/analytics/dist/esm/index.esm2017.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-analytics.mjs"],
  "sourcesContent": ["import { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, isIndexedDBAvailable, validateIndexedDBOpenable, isBrowserExtension, areCookiesEnabled, getModularInstance, deepEqual } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nconst ANALYTICS_TYPE = 'analytics';\r\n// Key to attach FID to in gtag params.\r\nconst GA_FID_KEY = 'firebase_id';\r\nconst ORIGIN_KEY = 'origin';\r\nconst FETCH_TIMEOUT_MILLIS = 60 * 1000;\r\nconst DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\r\nconst GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst ERRORS = {\r\n    [\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each appId.',\r\n    [\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' +\r\n        'it was initially called with. It can be called again with the same options to ' +\r\n        'return the existing instance, or getAnalytics() can be used ' +\r\n        'to get a reference to the already-intialized instance.',\r\n    [\"already-initialized-settings\" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    [\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\r\n    [\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    [\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    [\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    [\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\r\n    [\"no-api-key\" /* AnalyticsError.NO_API_KEY */]: 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid API key.',\r\n    [\"no-app-id\" /* AnalyticsError.NO_APP_ID */]: 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid app ID.',\r\n    [\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */]: 'The \"client_id\" field is empty.',\r\n    [\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */]: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\r\n};\r\nconst ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Verifies and creates a TrustedScriptURL.\r\n */\r\nfunction createGtagTrustedTypesScriptURL(url) {\r\n    if (!url.startsWith(GTAG_URL)) {\r\n        const err = ERROR_FACTORY.create(\"invalid-gtag-resource\" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {\r\n            gtagURL: url\r\n        });\r\n        logger.warn(err.message);\r\n        return '';\r\n    }\r\n    return url;\r\n}\r\n/**\r\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\r\n * have either resolved or rejected.\r\n *\r\n * @param promises Array of promises to wait for.\r\n */\r\nfunction promiseAllSettled(promises) {\r\n    return Promise.all(promises.map(promise => promise.catch(e => e)));\r\n}\r\n/**\r\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\r\n *\r\n * @param policyName A string containing the name of the policy\r\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\r\n * | the TrustedTypePolicy reference documentation}.\r\n */\r\nfunction createTrustedTypesPolicy(policyName, policyOptions) {\r\n    // Create a TrustedTypes policy that we can use for updating src\r\n    // properties\r\n    let trustedTypesPolicy;\r\n    if (window.trustedTypes) {\r\n        trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);\r\n    }\r\n    return trustedTypesPolicy;\r\n}\r\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction insertScriptTag(dataLayerName, measurementId) {\r\n    const trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {\r\n        createScriptURL: createGtagTrustedTypesScriptURL\r\n    });\r\n    const script = document.createElement('script');\r\n    // We are not providing an analyticsId in the URL because it would trigger a `page_view`\r\n    // without fid. We will initialize ga-id using gtag (config) command together with fid.\r\n    const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\r\n    script.src = trustedTypesPolicy\r\n        ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL)\r\n        : gtagScriptURL;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    let dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\r\nasync function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\r\n    // If config is already fetched, we know the appId and can use it to look up what FID promise we\r\n    /// are waiting for, and wait only on that one.\r\n    const correspondingAppId = measurementIdToAppId[measurementId];\r\n    try {\r\n        if (correspondingAppId) {\r\n            await initializationPromisesMap[correspondingAppId];\r\n        }\r\n        else {\r\n            // If config is not fetched yet, wait for all configs (we don't know which one we need) and\r\n            // find the appId (if any) corresponding to this measurementId. If there is one, wait on\r\n            // that appId's initialization promise. If there is none, promise resolves and gtag\r\n            // call goes through.\r\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\r\n            const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);\r\n            if (foundConfig) {\r\n                await initializationPromisesMap[foundConfig.appId];\r\n            }\r\n        }\r\n    }\r\n    catch (e) {\r\n        logger.error(e);\r\n    }\r\n    gtagCore(\"config\" /* GtagCommand.CONFIG */, measurementId, gtagParams);\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\r\nasync function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\r\n    try {\r\n        let initializationPromisesToWaitFor = [];\r\n        // If there's a 'send_to' param, check if any ID specified matches\r\n        // an initializeIds() promise we are waiting for.\r\n        if (gtagParams && gtagParams['send_to']) {\r\n            let gaSendToList = gtagParams['send_to'];\r\n            // Make it an array if is isn't, so it can be dealt with the same way.\r\n            if (!Array.isArray(gaSendToList)) {\r\n                gaSendToList = [gaSendToList];\r\n            }\r\n            // Checking 'send_to' fields requires having all measurement ID results back from\r\n            // the dynamic config fetch.\r\n            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);\r\n            for (const sendToId of gaSendToList) {\r\n                // Any fetched dynamic measurement ID that matches this 'send_to' ID\r\n                const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);\r\n                const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\r\n                if (initializationPromise) {\r\n                    initializationPromisesToWaitFor.push(initializationPromise);\r\n                }\r\n                else {\r\n                    // Found an item in 'send_to' that is not associated\r\n                    // directly with an FID, possibly a group.  Empty this array,\r\n                    // exit the loop early, and let it get populated below.\r\n                    initializationPromisesToWaitFor = [];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        // This will be unpopulated if there was no 'send_to' field , or\r\n        // if not all entries in the 'send_to' field could be mapped to\r\n        // a FID. In these cases, wait on all pending initialization promises.\r\n        if (initializationPromisesToWaitFor.length === 0) {\r\n            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\r\n        }\r\n        // Run core gtag function with args after all relevant initialization\r\n        // promises have been resolved.\r\n        await Promise.all(initializationPromisesToWaitFor);\r\n        // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n        gtagCore(\"event\" /* GtagCommand.EVENT */, measurementId, gtagParams || {});\r\n    }\r\n    catch (e) {\r\n        logger.error(e);\r\n    }\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\r\nfunction wrapGtag(gtagCore, \r\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\r\ninitializationPromisesMap, \r\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\r\ndynamicConfigPromisesList, \r\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\r\nmeasurementIdToAppId) {\r\n    /**\r\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n     * @param command Gtag command type.\r\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n     * @param gtagParams Params if event is EVENT/CONFIG.\r\n     */\r\n    async function gtagWrapper(command, ...args) {\r\n        try {\r\n            // If event, check that relevant initialization promises have completed.\r\n            if (command === \"event\" /* GtagCommand.EVENT */) {\r\n                const [measurementId, gtagParams] = args;\r\n                // If EVENT, second arg must be measurementId.\r\n                await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);\r\n            }\r\n            else if (command === \"config\" /* GtagCommand.CONFIG */) {\r\n                const [measurementId, gtagParams] = args;\r\n                // If CONFIG, second arg must be measurementId.\r\n                await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams);\r\n            }\r\n            else if (command === \"consent\" /* GtagCommand.CONSENT */) {\r\n                const [gtagParams] = args;\r\n                gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'update', gtagParams);\r\n            }\r\n            else if (command === \"get\" /* GtagCommand.GET */) {\r\n                const [measurementId, fieldName, callback] = args;\r\n                gtagCore(\"get\" /* GtagCommand.GET */, measurementId, fieldName, callback);\r\n            }\r\n            else if (command === \"set\" /* GtagCommand.SET */) {\r\n                const [customParams] = args;\r\n                // If SET, second arg must be params.\r\n                gtagCore(\"set\" /* GtagCommand.SET */, customParams);\r\n            }\r\n            else {\r\n                gtagCore(command, ...args);\r\n            }\r\n        }\r\n        catch (e) {\r\n            logger.error(e);\r\n        }\r\n    }\r\n    return gtagWrapper;\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\r\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    let gtagCore = function (..._args) {\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\r\n    return {\r\n        gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns the script tag in the DOM matching both the gtag url pattern\r\n * and the provided data layer name.\r\n */\r\nfunction findGtagScriptOnPage(dataLayerName) {\r\n    const scriptTags = window.document.getElementsByTagName('script');\r\n    for (const tag of Object.values(scriptTags)) {\r\n        if (tag.src &&\r\n            tag.src.includes(GTAG_URL) &&\r\n            tag.src.includes(dataLayerName)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\r\nconst LONG_RETRY_FACTOR = 30;\r\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\r\nconst BASE_INTERVAL_MILLIS = 1000;\r\n/**\r\n * Stubbable retry data storage class.\r\n */\r\nclass RetryData {\r\n    constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {\r\n        this.throttleMetadata = throttleMetadata;\r\n        this.intervalMillis = intervalMillis;\r\n    }\r\n    getThrottleMetadata(appId) {\r\n        return this.throttleMetadata[appId];\r\n    }\r\n    setThrottleMetadata(appId, metadata) {\r\n        this.throttleMetadata[appId] = metadata;\r\n    }\r\n    deleteThrottleMetadata(appId) {\r\n        delete this.throttleMetadata[appId];\r\n    }\r\n}\r\nconst defaultRetryData = new RetryData();\r\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\r\nfunction getHeaders(apiKey) {\r\n    return new Headers({\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nasync function fetchDynamicConfig(appFields) {\r\n    var _a;\r\n    const { appId, apiKey } = appFields;\r\n    const request = {\r\n        method: 'GET',\r\n        headers: getHeaders(apiKey)\r\n    };\r\n    const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\r\n    const response = await fetch(appUrl, request);\r\n    if (response.status !== 200 && response.status !== 304) {\r\n        let errorMessage = '';\r\n        try {\r\n            // Try to get any error message text from server response.\r\n            const jsonResponse = (await response.json());\r\n            if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\r\n                errorMessage = jsonResponse.error.message;\r\n            }\r\n        }\r\n        catch (_ignored) { }\r\n        throw ERROR_FACTORY.create(\"config-fetch-failed\" /* AnalyticsError.CONFIG_FETCH_FAILED */, {\r\n            httpStatus: response.status,\r\n            responseMessage: errorMessage\r\n        });\r\n    }\r\n    return response.json();\r\n}\r\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nasync function fetchDynamicConfigWithRetry(app, \r\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\r\nretryData = defaultRetryData, timeoutMillis) {\r\n    const { appId, apiKey, measurementId } = app.options;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\r\n    }\r\n    if (!apiKey) {\r\n        if (measurementId) {\r\n            return {\r\n                measurementId,\r\n                appId\r\n            };\r\n        }\r\n        throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\r\n    }\r\n    const throttleMetadata = retryData.getThrottleMetadata(appId) || {\r\n        backoffCount: 0,\r\n        throttleEndTimeMillis: Date.now()\r\n    };\r\n    const signal = new AnalyticsAbortSignal();\r\n    setTimeout(async () => {\r\n        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n        signal.abort();\r\n    }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\r\n    return attemptFetchDynamicConfigWithRetry({ appId, apiKey, measurementId }, throttleMetadata, signal, retryData);\r\n}\r\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\r\nasync function attemptFetchDynamicConfigWithRetry(appFields, { throttleEndTimeMillis, backoffCount }, signal, retryData = defaultRetryData // for testing\r\n) {\r\n    var _a;\r\n    const { appId, measurementId } = appFields;\r\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\r\n    // Ensures the throttle end time is honored if the last attempt timed out.\r\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\r\n    try {\r\n        await setAbortableTimeout(signal, throttleEndTimeMillis);\r\n    }\r\n    catch (e) {\r\n        if (measurementId) {\r\n            logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` +\r\n                ` Falling back to the measurement ID ${measurementId}` +\r\n                ` provided in the \"measurementId\" field in the local Firebase config. [${e === null || e === void 0 ? void 0 : e.message}]`);\r\n            return { appId, measurementId };\r\n        }\r\n        throw e;\r\n    }\r\n    try {\r\n        const response = await fetchDynamicConfig(appFields);\r\n        // Note the SDK only clears throttle state if response is success or non-retriable.\r\n        retryData.deleteThrottleMetadata(appId);\r\n        return response;\r\n    }\r\n    catch (e) {\r\n        const error = e;\r\n        if (!isRetriableError(error)) {\r\n            retryData.deleteThrottleMetadata(appId);\r\n            if (measurementId) {\r\n                logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` +\r\n                    ` Falling back to the measurement ID ${measurementId}` +\r\n                    ` provided in the \"measurementId\" field in the local Firebase config. [${error === null || error === void 0 ? void 0 : error.message}]`);\r\n                return { appId, measurementId };\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n        const backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503\r\n            ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\r\n            : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\r\n        // Increments backoff state.\r\n        const throttleMetadata = {\r\n            throttleEndTimeMillis: Date.now() + backoffMillis,\r\n            backoffCount: backoffCount + 1\r\n        };\r\n        // Persists state.\r\n        retryData.setThrottleMetadata(appId, throttleMetadata);\r\n        logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\r\n        return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);\r\n    }\r\n}\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise((resolve, reject) => {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        const timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(() => {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* AnalyticsError.FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    const httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nclass AnalyticsAbortSignal {\r\n    constructor() {\r\n        this.listeners = [];\r\n    }\r\n    addEventListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    abort() {\r\n        this.listeners.forEach(listener => listener());\r\n    }\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Event parameters to set on 'gtag' during initialization.\r\n */\r\nlet defaultEventParametersForInit;\r\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nasync function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, eventParams);\r\n        return;\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        const params = Object.assign(Object.assign({}, eventParams), { 'send_to': measurementId });\r\n        gtagFunction(\"event\" /* GtagCommand.EVENT */, eventName, params);\r\n    }\r\n}\r\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\r\nasync function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, { 'screen_name': screenName });\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'screen_name': screenName\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\r\nasync function setUserId$1(gtagFunction, initializationPromise, id, options) {\r\n    if (options && options.global) {\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, { 'user_id': id });\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'user_id': id\r\n        });\r\n    }\r\n}\r\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\r\nasync function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {\r\n    if (options && options.global) {\r\n        const flatProperties = {};\r\n        for (const key of Object.keys(properties)) {\r\n            // use dot notation for merge behavior in gtag.js\r\n            flatProperties[`user_properties.${key}`] = properties[key];\r\n        }\r\n        gtagFunction(\"set\" /* GtagCommand.SET */, flatProperties);\r\n        return Promise.resolve();\r\n    }\r\n    else {\r\n        const measurementId = await initializationPromise;\r\n        gtagFunction(\"config\" /* GtagCommand.CONFIG */, measurementId, {\r\n            update: true,\r\n            'user_properties': properties\r\n        });\r\n    }\r\n}\r\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n */\r\nasync function internalGetGoogleAnalyticsClientId(gtagFunction, initializationPromise) {\r\n    const measurementId = await initializationPromise;\r\n    return new Promise((resolve, reject) => {\r\n        gtagFunction(\"get\" /* GtagCommand.GET */, measurementId, 'client_id', (clientId) => {\r\n            if (!clientId) {\r\n                reject(ERROR_FACTORY.create(\"no-client-id\" /* AnalyticsError.NO_CLIENT_ID */));\r\n            }\r\n            resolve(clientId);\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\r\nasync function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {\r\n    const measurementId = await initializationPromise;\r\n    window[`ga-disable-${measurementId}`] = !enabled;\r\n}\r\n/**\r\n * Consent parameters to default to during 'gtag' initialization.\r\n */\r\nlet defaultConsentSettingsForInit;\r\n/**\r\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\r\n * analytics.\r\n *\r\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\r\n */\r\nfunction _setConsentDefaultForInit(consentSettings) {\r\n    defaultConsentSettingsForInit = consentSettings;\r\n}\r\n/**\r\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\r\n * analytics.\r\n *\r\n * @param customParams Any custom params the user may pass to gtag.js.\r\n */\r\nfunction _setDefaultEventParametersForInit(customParams) {\r\n    defaultEventParametersForInit = customParams;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nasync function validateIndexedDB() {\r\n    if (!isIndexedDBAvailable()) {\r\n        logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\r\n            errorInfo: 'IndexedDB is not available in this environment.'\r\n        }).message);\r\n        return false;\r\n    }\r\n    else {\r\n        try {\r\n            await validateIndexedDBOpenable();\r\n        }\r\n        catch (e) {\r\n            logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {\r\n                errorInfo: e === null || e === void 0 ? void 0 : e.toString()\r\n            }).message);\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations _FirebaseInstallationsInternal instance.\r\n *\r\n * @returns Measurement ID.\r\n */\r\nasync function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {\r\n    var _a;\r\n    const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\r\n    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\r\n    dynamicConfigPromise\r\n        .then(config => {\r\n        measurementIdToAppId[config.measurementId] = config.appId;\r\n        if (app.options.measurementId &&\r\n            config.measurementId !== app.options.measurementId) {\r\n            logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` +\r\n                ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\r\n                ` To ensure analytics events are always sent to the correct Analytics property,` +\r\n                ` update the` +\r\n                ` measurement ID field in the local config or remove it from the local config.`);\r\n        }\r\n    })\r\n        .catch(e => logger.error(e));\r\n    // Add to list to track state of all dynamic config promises.\r\n    dynamicConfigPromisesList.push(dynamicConfigPromise);\r\n    const fidPromise = validateIndexedDB().then(envIsValid => {\r\n        if (envIsValid) {\r\n            return installations.getId();\r\n        }\r\n        else {\r\n            return undefined;\r\n        }\r\n    });\r\n    const [dynamicConfig, fid] = await Promise.all([\r\n        dynamicConfigPromise,\r\n        fidPromise\r\n    ]);\r\n    // Detect if user has already put the gtag <script> tag on this page with the passed in\r\n    // data layer name.\r\n    if (!findGtagScriptOnPage(dataLayerName)) {\r\n        insertScriptTag(dataLayerName, dynamicConfig.measurementId);\r\n    }\r\n    // Detects if there are consent settings that need to be configured.\r\n    if (defaultConsentSettingsForInit) {\r\n        gtagCore(\"consent\" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);\r\n        _setConsentDefaultForInit(undefined);\r\n    }\r\n    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n    // but since it is idempotent, we can call it multiple times.\r\n    // We keep it together with other initialization logic for better code structure.\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    gtagCore('js', new Date());\r\n    // User config added first. We don't want users to accidentally overwrite\r\n    // base Firebase config properties.\r\n    const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {};\r\n    // guard against developers accidentally setting properties with prefix `firebase_`\r\n    configProperties[ORIGIN_KEY] = 'firebase';\r\n    configProperties.update = true;\r\n    if (fid != null) {\r\n        configProperties[GA_FID_KEY] = fid;\r\n    }\r\n    // It should be the first config command called on this GA-ID\r\n    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\r\n    // `configProperties`.\r\n    gtagCore(\"config\" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);\r\n    // Detects if there is data that will be set on every event logged from the SDK.\r\n    if (defaultEventParametersForInit) {\r\n        gtagCore(\"set\" /* GtagCommand.SET */, defaultEventParametersForInit);\r\n        _setDefaultEventParametersForInit(undefined);\r\n    }\r\n    return dynamicConfig.measurementId;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Analytics Service class.\r\n */\r\nclass AnalyticsService {\r\n    constructor(app) {\r\n        this.app = app;\r\n    }\r\n    _delete() {\r\n        delete initializationPromisesMap[this.app.options.appId];\r\n        return Promise.resolve();\r\n    }\r\n}\r\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\r\nlet initializationPromisesMap = {};\r\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\r\nlet dynamicConfigPromisesList = [];\r\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\r\nconst measurementIdToAppId = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nlet dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nlet gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nlet gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nlet wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nlet globalInitDone = false;\r\n/**\r\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\r\n * Intended to be used if `gtag.js` script has been installed on\r\n * this page independently of Firebase Analytics, and is using non-default\r\n * names for either the `gtag` function or for `dataLayer`.\r\n * Must be called before calling `getAnalytics()` or it won't\r\n * have any effect.\r\n *\r\n * @public\r\n *\r\n * @param options - Custom gtag and dataLayer names.\r\n */\r\nfunction settings(options) {\r\n    if (globalInitDone) {\r\n        throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\r\n    }\r\n    if (options.dataLayerName) {\r\n        dataLayerName = options.dataLayerName;\r\n    }\r\n    if (options.gtagName) {\r\n        gtagName = options.gtagName;\r\n    }\r\n}\r\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\r\nfunction warnOnBrowserContextMismatch() {\r\n    const mismatchedEnvMessages = [];\r\n    if (isBrowserExtension()) {\r\n        mismatchedEnvMessages.push('This is a browser extension environment.');\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        mismatchedEnvMessages.push('Cookies are not available.');\r\n    }\r\n    if (mismatchedEnvMessages.length > 0) {\r\n        const details = mismatchedEnvMessages\r\n            .map((message, index) => `(${index + 1}) ${message}`)\r\n            .join(' ');\r\n        const err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {\r\n            errorInfo: details\r\n        });\r\n        logger.warn(err.message);\r\n    }\r\n}\r\n/**\r\n * Analytics instance factory.\r\n * @internal\r\n */\r\nfunction factory(app, installations, options) {\r\n    warnOnBrowserContextMismatch();\r\n    const appId = app.options.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* AnalyticsError.NO_APP_ID */);\r\n    }\r\n    if (!app.options.apiKey) {\r\n        if (app.options.measurementId) {\r\n            logger.warn(`The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\r\n                ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\r\n                ` provided in the \"measurementId\" field in the local Firebase config.`);\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"no-api-key\" /* AnalyticsError.NO_API_KEY */);\r\n        }\r\n    }\r\n    if (initializationPromisesMap[appId] != null) {\r\n        throw ERROR_FACTORY.create(\"already-exists\" /* AnalyticsError.ALREADY_EXISTS */, {\r\n            id: appId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        getOrCreateDataLayer(dataLayerName);\r\n        const { wrappedGtag, gtagCore } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    // This map reflects the completion state of all promises for each appId.\r\n    initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);\r\n    const analyticsInstance = new AnalyticsService(app);\r\n    return analyticsInstance;\r\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nfunction getAnalytics(app = getApp()) {\r\n    app = getModularInstance(app);\r\n    // Dependencies\r\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\r\n    if (analyticsProvider.isInitialized()) {\r\n        return analyticsProvider.getImmediate();\r\n    }\r\n    return initializeAnalytics(app);\r\n}\r\n/**\r\n * Returns an {@link Analytics} instance for the given app.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nfunction initializeAnalytics(app, options = {}) {\r\n    // Dependencies\r\n    const analyticsProvider = _getProvider(app, ANALYTICS_TYPE);\r\n    if (analyticsProvider.isInitialized()) {\r\n        const existingInstance = analyticsProvider.getImmediate();\r\n        if (deepEqual(options, analyticsProvider.getOptions())) {\r\n            return existingInstance;\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"already-initialized\" /* AnalyticsError.ALREADY_INITIALIZED */);\r\n        }\r\n    }\r\n    const analyticsInstance = analyticsProvider.initialize({ options });\r\n    return analyticsInstance;\r\n}\r\n/**\r\n * This is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. Check if it's not a browser extension environment.\r\n * 2. Check if cookies are enabled in current browser.\r\n * 3. Check if IndexedDB is supported by the browser environment.\r\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\r\n *\r\n * @public\r\n *\r\n */\r\nasync function isSupported() {\r\n    if (isBrowserExtension()) {\r\n        return false;\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        return false;\r\n    }\r\n    if (!isIndexedDBAvailable()) {\r\n        return false;\r\n    }\r\n    try {\r\n        const isDBOpenable = await validateIndexedDBOpenable();\r\n        return isDBOpenable;\r\n    }\r\n    catch (error) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Use gtag `config` command to set `screen_name`.\r\n *\r\n * @public\r\n *\r\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\r\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param screenName - Screen name to set.\r\n */\r\nfunction setCurrentScreen(analyticsInstance, screenName, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Retrieves a unique Google Analytics identifier for the web client.\r\n * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.\r\n *\r\n * @public\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n */\r\nasync function getGoogleAnalyticsClientId(analyticsInstance) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    return internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]);\r\n}\r\n/**\r\n * Use gtag `config` command to set `user_id`.\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param id - User ID to set.\r\n */\r\nfunction setUserId(analyticsInstance, id, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Use gtag `config` command to set all params specified.\r\n *\r\n * @public\r\n */\r\nfunction setUserProperties(analyticsInstance, properties, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Sets whether Google Analytics collection is enabled for this app on this device.\r\n * Sets global `window['ga-disable-analyticsId'] = true;`\r\n *\r\n * @public\r\n *\r\n * @param analyticsInstance - The {@link Analytics} instance.\r\n * @param enabled - If true, enables collection, if false, disables it.\r\n */\r\nfunction setAnalyticsCollectionEnabled(analyticsInstance, enabled) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\r\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\r\n * all subsequent events.\r\n * @public\r\n * @param customParams - Any custom params the user may pass to gtag.js.\r\n */\r\nfunction setDefaultEventParameters(customParams) {\r\n    // Check if reference to existing gtag function on window object exists\r\n    if (wrappedGtagFunction) {\r\n        wrappedGtagFunction(\"set\" /* GtagCommand.SET */, customParams);\r\n    }\r\n    else {\r\n        _setDefaultEventParametersForInit(customParams);\r\n    }\r\n}\r\n/**\r\n * Sends a Google Analytics event with given `eventParams`. This method\r\n * automatically associates this logged event with this Firebase web\r\n * app instance on this device.\r\n * List of official event parameters can be found in the gtag.js\r\n * reference documentation:\r\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\r\n * | the GA4 reference documentation}.\r\n *\r\n * @public\r\n */\r\nfunction logEvent(analyticsInstance, eventName, eventParams, options) {\r\n    analyticsInstance = getModularInstance(analyticsInstance);\r\n    logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));\r\n}\r\n/**\r\n * Sets the applicable end user consent state for this web app across all gtag references once\r\n * Firebase Analytics is initialized.\r\n *\r\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\r\n * types are set to \"granted\".\r\n * @public\r\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\r\n */\r\nfunction setConsent(consentSettings) {\r\n    // Check if reference to existing gtag function on window object exists\r\n    if (wrappedGtagFunction) {\r\n        wrappedGtagFunction(\"consent\" /* GtagCommand.CONSENT */, 'update', consentSettings);\r\n    }\r\n    else {\r\n        _setConsentDefaultForInit(consentSettings);\r\n    }\r\n}\n\nconst name = \"@firebase/analytics\";\nconst version = \"0.10.0\";\n\n/**\r\n * Firebase Analytics\r\n *\r\n * @packageDocumentation\r\n */\r\nfunction registerAnalytics() {\r\n    _registerComponent(new Component(ANALYTICS_TYPE, (container, { options: analyticsOptions }) => {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        const app = container.getProvider('app').getImmediate();\r\n        const installations = container\r\n            .getProvider('installations-internal')\r\n            .getImmediate();\r\n        return factory(app, installations, analyticsOptions);\r\n    }, \"PUBLIC\" /* ComponentType.PUBLIC */));\r\n    _registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* ComponentType.PRIVATE */));\r\n    registerVersion(name, version);\r\n    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\r\n    registerVersion(name, version, 'esm2017');\r\n    function internalFactory(container) {\r\n        try {\r\n            const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\r\n            return {\r\n                logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {\r\n                reason: e\r\n            });\r\n        }\r\n    }\r\n}\r\nregisterAnalytics();\n\nexport { getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, logEvent, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings };\n\n", "import { ɵgetAllInstancesOf, ɵisSupportedError, ɵzoneWrap, VERSION, ɵgetDefaultInstanceOf, ɵAngularFireSchedulers } from '@angular/fire';\nimport { from, timer, of } from 'rxjs';\nimport { concatMap, distinct, filter, switchMap, map, groupBy, distinctUntilChanged, startWith, pairwise, mergeMap } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, InjectionToken, APP_INITIALIZER, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { isSupported as isSupported$1, getAnalytics as getAnalytics$1, getGoogleAnalyticsClientId as getGoogleAnalyticsClientId$1, initializeAnalytics as initializeAnalytics$1, logEvent as logEvent$1, setAnalyticsCollectionEnabled as setAnalyticsCollectionEnabled$1, setConsent as setConsent$1, setCurrentScreen as setCurrentScreen$1, setDefaultEventParameters as setDefaultEventParameters$1, settings as settings$1, setUserId as setUserId$1, setUserProperties as setUserProperties$1 } from 'firebase/analytics';\nexport * from 'firebase/analytics';\nimport * as i2 from '@angular/platform-browser';\nimport * as i1$1 from '@angular/router';\nimport { ActivationEnd, ɵEmptyOutletComponent } from '@angular/router';\nimport * as i1 from '@angular/fire/auth';\nimport { authState } from '@angular/fire/auth';\nclass Analytics {\n  constructor(analytics) {\n    return analytics;\n  }\n}\nconst ANALYTICS_PROVIDER_NAME = 'analytics';\nclass AnalyticsInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(ANALYTICS_PROVIDER_NAME);\n  }\n}\nconst analyticInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(ANALYTICS_PROVIDER_NAME))), distinct());\nconst isAnalyticsSupportedValueSymbol = '__angularfire_symbol__analyticsIsSupportedValue';\nconst isAnalyticsSupportedPromiseSymbol = '__angularfire_symbol__analyticsIsSupported';\nglobalThis[isAnalyticsSupportedPromiseSymbol] ||= isSupported$1().then(it => globalThis[isAnalyticsSupportedValueSymbol] = it).catch(() => globalThis[isAnalyticsSupportedValueSymbol] = false);\nconst isAnalyticsSupportedFactory = {\n  async: () => globalThis[isAnalyticsSupportedPromiseSymbol],\n  sync: () => {\n    const ret = globalThis[isAnalyticsSupportedValueSymbol];\n    if (ret === undefined) {\n      throw new Error(ɵisSupportedError('Analytics'));\n    }\n    return ret;\n  }\n};\nconst isSupported = isAnalyticsSupportedFactory.async;\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getAnalytics = ɵzoneWrap(getAnalytics$1, true);\nconst getGoogleAnalyticsClientId = ɵzoneWrap(getGoogleAnalyticsClientId$1, true);\nconst initializeAnalytics = ɵzoneWrap(initializeAnalytics$1, true);\nconst logEvent = ɵzoneWrap(logEvent$1, true);\nconst setAnalyticsCollectionEnabled = ɵzoneWrap(setAnalyticsCollectionEnabled$1, true);\nconst setConsent = ɵzoneWrap(setConsent$1, true);\nconst setCurrentScreen = ɵzoneWrap(setCurrentScreen$1, true);\nconst setDefaultEventParameters = ɵzoneWrap(setDefaultEventParameters$1, true);\nconst settings = ɵzoneWrap(settings$1, true);\nconst setUserId = ɵzoneWrap(setUserId$1, true);\nconst setUserProperties = ɵzoneWrap(setUserProperties$1, true);\nclass UserTrackingService {\n  initialized;\n  disposables = [];\n  constructor(auth, zone, injector) {\n    registerVersion('angularfire', VERSION.full, 'user-tracking');\n    let resolveInitialized;\n    this.initialized = zone.runOutsideAngular(() => new Promise(resolve => {\n      resolveInitialized = resolve;\n    }));\n    // The APP_INITIALIZER that is making isSupported() sync for the sake of convenient DI\n    // may not be done when services are initialized. Guard the functionality by first ensuring\n    // that the (global) promise has resolved, then get Analytics from the injector.\n    isSupported().then(() => {\n      const analytics = injector.get(Analytics);\n      if (analytics) {\n        this.disposables = [\n        // TODO add credential tracking back in\n        authState(auth).subscribe(user => {\n          setUserId(analytics, user?.uid);\n          resolveInitialized();\n        })];\n      } else {\n        resolveInitialized();\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.disposables.forEach(it => it.unsubscribe());\n  }\n  static ɵfac = function UserTrackingService_Factory(t) {\n    return new (t || UserTrackingService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserTrackingService,\n    factory: UserTrackingService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserTrackingService, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Auth\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i0.Injector\n  }], null);\n})();\nconst FIREBASE_EVENT_ORIGIN_KEY = 'firebase_event_origin';\nconst FIREBASE_PREVIOUS_SCREEN_CLASS_KEY = 'firebase_previous_class';\nconst FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY = 'firebase_previous_id';\nconst FIREBASE_PREVIOUS_SCREEN_NAME_KEY = 'firebase_previous_screen';\nconst FIREBASE_SCREEN_CLASS_KEY = 'firebase_screen_class';\nconst FIREBASE_SCREEN_INSTANCE_ID_KEY = 'firebase_screen_id';\nconst FIREBASE_SCREEN_NAME_KEY = 'firebase_screen';\nconst OUTLET_KEY = 'outlet';\nconst PAGE_PATH_KEY = 'page_path';\nconst PAGE_TITLE_KEY = 'page_title';\nconst SCREEN_CLASS_KEY = 'screen_class';\nconst SCREEN_NAME_KEY = 'screen_name';\nconst SCREEN_VIEW_EVENT = 'screen_view';\nconst EVENT_ORIGIN_AUTO = 'auto';\nconst SCREEN_INSTANCE_DELIMITER = '#';\n// this is an INT64 in iOS/Android but use INT32 cause javascript\nlet nextScreenInstanceID = Math.floor(Math.random() * (2 ** 32 - 1)) - 2 ** 31;\nconst knownScreenInstanceIDs = {};\nconst getScreenInstanceID = params => {\n  // unique the screen class against the outlet name\n  const screenInstanceKey = [params[SCREEN_CLASS_KEY], params[OUTLET_KEY]].join(SCREEN_INSTANCE_DELIMITER);\n  // eslint-disable-next-line no-prototype-builtins\n  if (knownScreenInstanceIDs.hasOwnProperty(screenInstanceKey)) {\n    return knownScreenInstanceIDs[screenInstanceKey];\n  } else {\n    const ret = nextScreenInstanceID++;\n    knownScreenInstanceIDs[screenInstanceKey] = ret;\n    return ret;\n  }\n};\nconst ɵscreenViewEvent = (router, title, componentFactoryResolver) => {\n  const activationEndEvents = router.events.pipe(filter(e => e instanceof ActivationEnd));\n  return activationEndEvents.pipe(switchMap(activationEnd => {\n    // router parseUrl is having trouble with outlets when they're empty\n    // e.g, /asdf/1(bob://sally:asdf), so put another slash in when empty\n    const urlTree = router.parseUrl(router.url.replace(/(?:\\().+(?:\\))/g, a => a.replace('://', ':///')));\n    const pagePath = urlTree.root.children[activationEnd.snapshot.outlet]?.toString() || '';\n    const actualSnapshot = router.routerState.root.children.map(it => it).find(it => it.outlet === activationEnd.snapshot.outlet);\n    if (!actualSnapshot) {\n      return of(null);\n    }\n    let actualDeep = actualSnapshot;\n    while (actualDeep.firstChild) {\n      actualDeep = actualDeep.firstChild;\n    }\n    const screenName = actualDeep.pathFromRoot.map(s => s.routeConfig?.path).filter(it => it).join('/') || '/';\n    const params = {\n      [SCREEN_NAME_KEY]: screenName,\n      [PAGE_PATH_KEY]: `/${pagePath}`,\n      [FIREBASE_EVENT_ORIGIN_KEY]: EVENT_ORIGIN_AUTO,\n      [FIREBASE_SCREEN_NAME_KEY]: screenName,\n      [OUTLET_KEY]: activationEnd.snapshot.outlet\n    };\n    if (title) {\n      params[PAGE_TITLE_KEY] = title.getTitle();\n    }\n    let component = actualSnapshot.component;\n    if (component) {\n      if (component === ɵEmptyOutletComponent) {\n        let deepSnapshot = activationEnd.snapshot;\n        // TODO when might there be mutple children, different outlets? explore\n        while (deepSnapshot.firstChild) {\n          deepSnapshot = deepSnapshot.firstChild;\n        }\n        component = deepSnapshot.component;\n      }\n    } else {\n      component = activationEnd.snapshot.component;\n    }\n    if (typeof component === 'string') {\n      return of({\n        ...params,\n        [SCREEN_CLASS_KEY]: component\n      });\n    } else if (component) {\n      const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n      return of({\n        ...params,\n        [SCREEN_CLASS_KEY]: componentFactory.selector\n      });\n    }\n    // lazy loads cause extra activations, ignore\n    return of(null);\n  }), filter(it => !!it), map(params => ({\n    [FIREBASE_SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY],\n    [FIREBASE_SCREEN_INSTANCE_ID_KEY]: getScreenInstanceID(params),\n    ...params\n  })), groupBy(it => it[OUTLET_KEY]), mergeMap(it => it.pipe(distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)), startWith(undefined), pairwise(), map(([prior, current]) => prior ? {\n    [FIREBASE_PREVIOUS_SCREEN_CLASS_KEY]: prior[SCREEN_CLASS_KEY],\n    [FIREBASE_PREVIOUS_SCREEN_NAME_KEY]: prior[SCREEN_NAME_KEY],\n    [FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY]: prior[FIREBASE_SCREEN_INSTANCE_ID_KEY],\n    ...current\n  } : current))));\n};\nclass ScreenTrackingService {\n  disposable;\n  constructor(router, title, componentFactoryResolver, zone, userTrackingService, injector) {\n    registerVersion('angularfire', VERSION.full, 'screen-tracking');\n    // The APP_INITIALIZER that is making isSupported() sync for the sake of convenient DI\n    // may not be done when services are initialized. Guard the functionality by first ensuring\n    // that the (global) promise has resolved, then get Analytics from the injector.\n    isSupported().then(() => {\n      const analytics = injector.get(Analytics);\n      if (!router || !analytics) {\n        return;\n      }\n      zone.runOutsideAngular(() => {\n        this.disposable = ɵscreenViewEvent(router, title, componentFactoryResolver).pipe(switchMap(async params => {\n          if (userTrackingService) {\n            await userTrackingService.initialized;\n          }\n          return logEvent(analytics, SCREEN_VIEW_EVENT, params);\n        })).subscribe();\n      });\n    });\n  }\n  ngOnDestroy() {\n    if (this.disposable) {\n      this.disposable.unsubscribe();\n    }\n  }\n  static ɵfac = function ScreenTrackingService_Factory(t) {\n    return new (t || ScreenTrackingService)(i0.ɵɵinject(i1$1.Router, 8), i0.ɵɵinject(i2.Title, 8), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(UserTrackingService, 8), i0.ɵɵinject(i0.Injector));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScreenTrackingService,\n    factory: ScreenTrackingService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScreenTrackingService, [{\n    type: Injectable\n  }], () => [{\n    type: i1$1.Router,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i2.Title,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i0.ComponentFactoryResolver\n  }, {\n    type: i0.NgZone\n  }, {\n    type: UserTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i0.Injector\n  }], null);\n})();\nconst PROVIDED_ANALYTICS_INSTANCES = new InjectionToken('angularfire2.analytics-instances');\nfunction defaultAnalyticsInstanceFactory(provided, defaultApp) {\n  if (!isAnalyticsSupportedFactory.sync()) {\n    return null;\n  }\n  const defaultAnalytics = ɵgetDefaultInstanceOf(ANALYTICS_PROVIDER_NAME, provided, defaultApp);\n  return defaultAnalytics && new Analytics(defaultAnalytics);\n}\nfunction analyticsInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!isAnalyticsSupportedFactory.sync()) {\n      return null;\n    }\n    const analytics = zone.runOutsideAngular(() => fn(injector));\n    return new Analytics(analytics);\n  };\n}\nconst ANALYTICS_INSTANCES_PROVIDER = {\n  provide: AnalyticsInstances,\n  deps: [[new Optional(), PROVIDED_ANALYTICS_INSTANCES]]\n};\nconst DEFAULT_ANALYTICS_INSTANCE_PROVIDER = {\n  provide: Analytics,\n  useFactory: defaultAnalyticsInstanceFactory,\n  deps: [[new Optional(), PROVIDED_ANALYTICS_INSTANCES], FirebaseApp]\n};\nclass AnalyticsModule {\n  constructor(_screenTrackingService, _userTrackingService) {\n    registerVersion('angularfire', VERSION.full, 'analytics');\n  }\n  static ɵfac = function AnalyticsModule_Factory(t) {\n    return new (t || AnalyticsModule)(i0.ɵɵinject(ScreenTrackingService, 8), i0.ɵɵinject(UserTrackingService, 8));\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AnalyticsModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_ANALYTICS_INSTANCE_PROVIDER, ANALYTICS_INSTANCES_PROVIDER, {\n      provide: APP_INITIALIZER,\n      useValue: isAnalyticsSupportedFactory.async,\n      multi: true\n    }]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AnalyticsModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_ANALYTICS_INSTANCE_PROVIDER, ANALYTICS_INSTANCES_PROVIDER, {\n        provide: APP_INITIALIZER,\n        useValue: isAnalyticsSupportedFactory.async,\n        multi: true\n      }]\n    }]\n  }], () => [{\n    type: ScreenTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: UserTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nfunction provideAnalytics(fn, ...deps) {\n  return {\n    ngModule: AnalyticsModule,\n    providers: [{\n      provide: PROVIDED_ANALYTICS_INSTANCES,\n      useFactory: analyticsInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, ...deps]\n    }]\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Analytics, AnalyticsInstances, AnalyticsModule, ScreenTrackingService, UserTrackingService, analyticInstance$, getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, logEvent, provideAnalytics, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings, ɵscreenViewEvent };\n"],
  "mappings": "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",
  "names": ["dataLayerName", "initializationPromisesMap", "dynamicConfigPromisesList", "measurementIdToAppId", "isSupported", "getAnalytics", "getGoogleAnalyticsClientId", "initializeAnalytics", "logEvent", "setAnalyticsCollectionEnabled", "setConsent", "setCurrentScreen", "setDefaultEventParameters", "settings", "setUserId", "setUserProperties"]
}
